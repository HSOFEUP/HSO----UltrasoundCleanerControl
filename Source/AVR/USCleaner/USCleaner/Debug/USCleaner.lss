
USCleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800100  00001b2c  00001be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b2c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  008002a6  008002a6  00001d86  2**0
                  ALLOC
  3 .eeprom       0000000d  00810000  00810000  00001d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001d93  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002655  00000000  00000000  0000218f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b57  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d23  00000000  00000000  0000533b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  00007060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ada  00000000  00000000  00007a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bbe  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c0       	rjmp	.+272    	; 0x112 <__ctors_end>
       2:	00 00       	nop
       4:	1c c2       	rjmp	.+1080   	; 0x43e <__vector_1>
       6:	00 00       	nop
       8:	24 c2       	rjmp	.+1096   	; 0x452 <__vector_2>
       a:	00 00       	nop
       c:	2c c2       	rjmp	.+1112   	; 0x466 <__vector_3>
       e:	00 00       	nop
      10:	34 c2       	rjmp	.+1128   	; 0x47a <__vector_4>
      12:	00 00       	nop
      14:	3c c2       	rjmp	.+1144   	; 0x48e <__vector_5>
      16:	00 00       	nop
      18:	44 c2       	rjmp	.+1160   	; 0x4a2 <__vector_6>
      1a:	00 00       	nop
      1c:	4c c2       	rjmp	.+1176   	; 0x4b6 <__vector_7>
      1e:	00 00       	nop
      20:	54 c2       	rjmp	.+1192   	; 0x4ca <__vector_8>
      22:	00 00       	nop
      24:	5c c2       	rjmp	.+1208   	; 0x4de <__vector_9>
      26:	00 00       	nop
      28:	64 c2       	rjmp	.+1224   	; 0x4f2 <__vector_10>
      2a:	00 00       	nop
      2c:	6c c2       	rjmp	.+1240   	; 0x506 <__vector_11>
      2e:	00 00       	nop
      30:	74 c2       	rjmp	.+1256   	; 0x51a <__vector_12>
      32:	00 00       	nop
      34:	7c c2       	rjmp	.+1272   	; 0x52e <__vector_13>
      36:	00 00       	nop
      38:	84 c2       	rjmp	.+1288   	; 0x542 <__vector_14>
      3a:	00 00       	nop
      3c:	8c c2       	rjmp	.+1304   	; 0x556 <__vector_15>
      3e:	00 00       	nop
      40:	fc c2       	rjmp	.+1528   	; 0x63a <__vector_16>
      42:	00 00       	nop
      44:	04 c3       	rjmp	.+1544   	; 0x64e <__vector_17>
      46:	00 00       	nop
      48:	0c c3       	rjmp	.+1560   	; 0x662 <__vector_18>
      4a:	00 00       	nop
      4c:	32 c3       	rjmp	.+1636   	; 0x6b2 <__vector_19>
      4e:	00 00       	nop
      50:	3a c3       	rjmp	.+1652   	; 0x6c6 <__vector_20>
      52:	00 00       	nop
      54:	42 c3       	rjmp	.+1668   	; 0x6da <__vector_21>
      56:	00 00       	nop
      58:	4a c3       	rjmp	.+1684   	; 0x6ee <__vector_22>
      5a:	00 00       	nop
      5c:	52 c3       	rjmp	.+1700   	; 0x702 <__vector_23>
      5e:	00 00       	nop
      60:	5a c3       	rjmp	.+1716   	; 0x716 <__vector_24>
      62:	00 00       	nop
      64:	62 c3       	rjmp	.+1732   	; 0x72a <__vector_25>
      66:	00 00       	nop
      68:	6a c3       	rjmp	.+1748   	; 0x73e <__vector_26>
      6a:	00 00       	nop
      6c:	72 c3       	rjmp	.+1764   	; 0x752 <__vector_27>
      6e:	00 00       	nop
      70:	7a c3       	rjmp	.+1780   	; 0x766 <__vector_28>
      72:	00 00       	nop
      74:	82 c3       	rjmp	.+1796   	; 0x77a <__vector_29>
      76:	00 00       	nop
      78:	8a c3       	rjmp	.+1812   	; 0x78e <__vector_30>
      7a:	00 00       	nop
      7c:	cd c3       	rjmp	.+1946   	; 0x818 <__vector_31>
      7e:	00 00       	nop
      80:	d5 c3       	rjmp	.+1962   	; 0x82c <__vector_32>
      82:	00 00       	nop
      84:	dd c3       	rjmp	.+1978   	; 0x840 <__vector_33>
      86:	00 00       	nop
      88:	e5 c3       	rjmp	.+1994   	; 0x854 <__vector_34>
      8a:	00 00       	nop
      8c:	f5 00       	.word	0x00f5	; ????
      8e:	01 01       	movw	r0, r2
      90:	09 01       	movw	r0, r18
      92:	0d 01       	movw	r0, r26
      94:	10 01       	movw	r2, r0
      96:	fd 00       	.word	0x00fd	; ????
      98:	10 01       	movw	r2, r0
      9a:	f9 00       	.word	0x00f9	; ????
      9c:	05 01       	movw	r0, r10
      9e:	70 06       	cpc	r7, r16
      a0:	bf 06       	cpc	r11, r31
      a2:	f0 06       	cpc	r15, r16
      a4:	02 07       	cpc	r16, r18
      a6:	1b 07       	cpc	r17, r27
      a8:	b4 06       	cpc	r11, r20
      aa:	11 07       	cpc	r17, r17
      ac:	93 06       	cpc	r9, r19
      ae:	d2 06       	cpc	r13, r18
      b0:	2b 07       	cpc	r18, r27
      b2:	62 07       	cpc	r22, r18
      b4:	6e 07       	cpc	r22, r30
      b6:	4b 07       	cpc	r20, r27
      b8:	57 07       	cpc	r21, r23
      ba:	31 07       	cpc	r19, r17
      bc:	3e 07       	cpc	r19, r30
      be:	7a 07       	cpc	r23, r26
      c0:	92 07       	cpc	r25, r18
      c2:	ba 07       	cpc	r27, r26
      c4:	e3 07       	cpc	r30, r19
      c6:	f8 07       	cpc	r31, r24
      c8:	1f 08       	sbc	r1, r15
      ca:	a6 07       	cpc	r26, r22
      cc:	0c 08       	sbc	r0, r12
      ce:	1f 08       	sbc	r1, r15
      d0:	cf 07       	cpc	r28, r31

000000d2 <LcdCustomChar>:
      d2:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      e2:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      f2:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     102:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d0 e1       	ldi	r29, 0x10	; 16
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	12 e0       	ldi	r17, 0x02	; 2
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	ec e2       	ldi	r30, 0x2C	; 44
     126:	fb e1       	ldi	r31, 0x1B	; 27
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	0b bf       	out	0x3b, r16	; 59
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x14>
     12e:	07 90       	elpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a6 3a       	cpi	r26, 0xA6	; 166
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0x10>

00000138 <__do_clear_bss>:
     138:	23 e0       	ldi	r18, 0x03	; 3
     13a:	a6 ea       	ldi	r26, 0xA6	; 166
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a2 30       	cpi	r26, 0x02	; 2
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <main>
     14c:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <_exit>

00000150 <showLcdSplash>:
/************************************************************************/
/* LCD STUFF                                                                     */
/************************************************************************/
void showLcdSplash(void){
	
	LCD_clr();
     150:	d9 d3       	rcall	.+1970   	; 0x904 <LCD_clr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     152:	2f ef       	ldi	r18, 0xFF	; 255
     154:	83 ec       	ldi	r24, 0xC3	; 195
     156:	99 e0       	ldi	r25, 0x09	; 9
     158:	21 50       	subi	r18, 0x01	; 1
     15a:	80 40       	sbci	r24, 0x00	; 0
     15c:	90 40       	sbci	r25, 0x00	; 0
     15e:	e1 f7       	brne	.-8      	; 0x158 <showLcdSplash+0x8>
     160:	00 c0       	rjmp	.+0      	; 0x162 <showLcdSplash+0x12>
     162:	00 00       	nop
	_delay_ms(200);
	LCD_gotoXY(4,0);
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	84 e0       	ldi	r24, 0x04	; 4
     168:	ed d3       	rcall	.+2010   	; 0x944 <LCD_gotoXY>
	LCD_sendString("Ultrasound");
     16a:	8a e1       	ldi	r24, 0x1A	; 26
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	cd d3       	rcall	.+1946   	; 0x90a <LCD_sendString>
	
	LCD_gotoXY(6,1);
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	e7 d3       	rcall	.+1998   	; 0x944 <LCD_gotoXY>
	LCD_sendString("Cleaner");
     176:	85 e2       	ldi	r24, 0x25	; 37
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	c7 d3       	rcall	.+1934   	; 0x90a <LCD_sendString>
	
	LCD_gotoXY(3,2);
     17c:	62 e0       	ldi	r22, 0x02	; 2
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	e1 d3       	rcall	.+1986   	; 0x944 <LCD_gotoXY>
	LCD_sendString("HSO & Valente");
     182:	8d e2       	ldi	r24, 0x2D	; 45
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	c1 d3       	rcall	.+1922   	; 0x90a <LCD_sendString>
	
	
	LCD_gotoXY(4,3);
     188:	63 e0       	ldi	r22, 0x03	; 3
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	db d3       	rcall	.+1974   	; 0x944 <LCD_gotoXY>
	LCD_sendString("Version: 1.0");
     18e:	8b e3       	ldi	r24, 0x3B	; 59
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	bb d3       	rcall	.+1910   	; 0x90a <LCD_sendString>
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	87 ea       	ldi	r24, 0xA7	; 167
     198:	91 e6       	ldi	r25, 0x61	; 97
     19a:	21 50       	subi	r18, 0x01	; 1
     19c:	80 40       	sbci	r24, 0x00	; 0
     19e:	90 40       	sbci	r25, 0x00	; 0
     1a0:	e1 f7       	brne	.-8      	; 0x19a <showLcdSplash+0x4a>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <showLcdSplash+0x54>
     1a4:	00 00       	nop
	
	_delay_ms(2000); // to show the message
	
	LCD_clr();
     1a6:	ae c3       	rjmp	.+1884   	; 0x904 <LCD_clr>
     1a8:	08 95       	ret

000001aa <showLcdMessagesVars>:


/*****s*******************************************************************/
/* @ lcd messages                                                                      */
/************************************************************************/
void showLcdMessagesVars(uint8_t state){
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	64 97       	sbiw	r28, 0x14	; 20
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	18 2f       	mov	r17, r24
	
	char lcdBuffer[20];
	
	LCD_gotoXY(0,0);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	bd d3       	rcall	.+1914   	; 0x944 <LCD_gotoXY>
	LCD_sendString("STATUS: ");
     1ca:	88 e4       	ldi	r24, 0x48	; 72
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	9d d3       	rcall	.+1850   	; 0x90a <LCD_sendString>
	LCD_gotoXY(8,0);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	88 e0       	ldi	r24, 0x08	; 8
     1d4:	b7 d3       	rcall	.+1902   	; 0x944 <LCD_gotoXY>
	
	switch(state){
     1d6:	81 2f       	mov	r24, r17
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	89 30       	cpi	r24, 0x09	; 9
     1dc:	91 05       	cpc	r25, r1
     1de:	00 f5       	brcc	.+64     	; 0x220 <showLcdMessagesVars+0x76>
     1e0:	fc 01       	movw	r30, r24
     1e2:	ea 5b       	subi	r30, 0xBA	; 186
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__tablejump2__>
		
		case STATE_IDLE:
			LCD_sendString("IDLE      ");
     1ea:	81 e5       	ldi	r24, 0x51	; 81
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	8d d3       	rcall	.+1818   	; 0x90a <LCD_sendString>
		break;
     1f0:	17 c0       	rjmp	.+46     	; 0x220 <showLcdMessagesVars+0x76>
		
		case STATE_READY:
			LCD_sendString("READY     ");
     1f2:	8c e5       	ldi	r24, 0x5C	; 92
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	89 d3       	rcall	.+1810   	; 0x90a <LCD_sendString>
		break;
     1f8:	13 c0       	rjmp	.+38     	; 0x220 <showLcdMessagesVars+0x76>
		
		case STATE_FILLING:
			LCD_sendString("FILLING   ");
     1fa:	87 e6       	ldi	r24, 0x67	; 103
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	85 d3       	rcall	.+1802   	; 0x90a <LCD_sendString>
		break;
     200:	0f c0       	rjmp	.+30     	; 0x220 <showLcdMessagesVars+0x76>
		
		
		case STATE_WASHING:
			LCD_sendString("WASHING   ");
     202:	82 e7       	ldi	r24, 0x72	; 114
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	81 d3       	rcall	.+1794   	; 0x90a <LCD_sendString>
		break;
     208:	0b c0       	rjmp	.+22     	; 0x220 <showLcdMessagesVars+0x76>
		
		case STATE_UNFILLING:
			LCD_sendString("DRAINING  ");
     20a:	8d e7       	ldi	r24, 0x7D	; 125
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	7d d3       	rcall	.+1786   	; 0x90a <LCD_sendString>
		break;
     210:	07 c0       	rjmp	.+14     	; 0x220 <showLcdMessagesVars+0x76>
		
		
		case STATE_DRYING:
			LCD_sendString("DRYING    ");
     212:	88 e8       	ldi	r24, 0x88	; 136
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	79 d3       	rcall	.+1778   	; 0x90a <LCD_sendString>
		break;
     218:	03 c0       	rjmp	.+6      	; 0x220 <showLcdMessagesVars+0x76>
		
		case STATE_EMPTY:
			LCD_sendString("EMPTY     ");
     21a:	83 e9       	ldi	r24, 0x93	; 147
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	75 d3       	rcall	.+1770   	; 0x90a <LCD_sendString>
	
	// program mode
	
	
	// convert to minutes
	LCD_gotoXY(0,1);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	8f d3       	rcall	.+1822   	; 0x944 <LCD_gotoXY>
	sprintf(lcdBuffer,"Wash Time: %2d:%d",washingCurrent/60, washingCurrent%60);
     226:	40 91 fe 02 	lds	r20, 0x02FE
     22a:	50 91 ff 02 	lds	r21, 0x02FF
     22e:	9a 01       	movw	r18, r20
     230:	a9 e8       	ldi	r26, 0x89	; 137
     232:	b8 e8       	ldi	r27, 0x88	; 136
     234:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     238:	96 95       	lsr	r25
     23a:	87 95       	ror	r24
     23c:	92 95       	swap	r25
     23e:	82 95       	swap	r24
     240:	8f 70       	andi	r24, 0x0F	; 15
     242:	89 27       	eor	r24, r25
     244:	9f 70       	andi	r25, 0x0F	; 15
     246:	89 27       	eor	r24, r25
     248:	6c e3       	ldi	r22, 0x3C	; 60
     24a:	68 9f       	mul	r22, r24
     24c:	90 01       	movw	r18, r0
     24e:	69 9f       	mul	r22, r25
     250:	30 0d       	add	r19, r0
     252:	11 24       	eor	r1, r1
     254:	ca 01       	movw	r24, r20
     256:	82 1b       	sub	r24, r18
     258:	93 0b       	sbc	r25, r19
     25a:	9f 93       	push	r25
     25c:	8f 93       	push	r24
     25e:	9a 01       	movw	r18, r20
     260:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     264:	96 95       	lsr	r25
     266:	87 95       	ror	r24
     268:	92 95       	swap	r25
     26a:	82 95       	swap	r24
     26c:	8f 70       	andi	r24, 0x0F	; 15
     26e:	89 27       	eor	r24, r25
     270:	9f 70       	andi	r25, 0x0F	; 15
     272:	89 27       	eor	r24, r25
     274:	9f 93       	push	r25
     276:	8f 93       	push	r24
     278:	8e e9       	ldi	r24, 0x9E	; 158
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	8e 01       	movw	r16, r28
     282:	0f 5f       	subi	r16, 0xFF	; 255
     284:	1f 4f       	sbci	r17, 0xFF	; 255
     286:	1f 93       	push	r17
     288:	0f 93       	push	r16
     28a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <sprintf>
	LCD_sendString(lcdBuffer);
     28e:	c8 01       	movw	r24, r16
     290:	3c d3       	rcall	.+1656   	; 0x90a <LCD_sendString>
	
	// CHECK TIME
	if(dryingTime >= drywingMinTime){
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	20 91 0e 01 	lds	r18, 0x010E
     2a0:	30 91 0f 01 	lds	r19, 0x010F
     2a4:	80 91 12 01 	lds	r24, 0x0112
     2a8:	90 91 13 01 	lds	r25, 0x0113
     2ac:	28 17       	cp	r18, r24
     2ae:	39 07       	cpc	r19, r25
     2b0:	e0 f1       	brcs	.+120    	; 0x32a <showLcdMessagesVars+0x180>
		LCD_gotoXY(0,2);
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	46 d3       	rcall	.+1676   	; 0x944 <LCD_gotoXY>
		sprintf(lcdBuffer,"Dry Time: %2d:%d   ",dryingCurrent/60, dryingCurrent%60);
     2b8:	40 91 fb 02 	lds	r20, 0x02FB
     2bc:	50 91 fc 02 	lds	r21, 0x02FC
     2c0:	9a 01       	movw	r18, r20
     2c2:	a9 e8       	ldi	r26, 0x89	; 137
     2c4:	b8 e8       	ldi	r27, 0x88	; 136
     2c6:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     2ca:	96 95       	lsr	r25
     2cc:	87 95       	ror	r24
     2ce:	92 95       	swap	r25
     2d0:	82 95       	swap	r24
     2d2:	8f 70       	andi	r24, 0x0F	; 15
     2d4:	89 27       	eor	r24, r25
     2d6:	9f 70       	andi	r25, 0x0F	; 15
     2d8:	89 27       	eor	r24, r25
     2da:	6c e3       	ldi	r22, 0x3C	; 60
     2dc:	68 9f       	mul	r22, r24
     2de:	90 01       	movw	r18, r0
     2e0:	69 9f       	mul	r22, r25
     2e2:	30 0d       	add	r19, r0
     2e4:	11 24       	eor	r1, r1
     2e6:	ca 01       	movw	r24, r20
     2e8:	82 1b       	sub	r24, r18
     2ea:	93 0b       	sbc	r25, r19
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	9a 01       	movw	r18, r20
     2f2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     2f6:	96 95       	lsr	r25
     2f8:	87 95       	ror	r24
     2fa:	92 95       	swap	r25
     2fc:	82 95       	swap	r24
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	89 27       	eor	r24, r25
     302:	9f 70       	andi	r25, 0x0F	; 15
     304:	89 27       	eor	r24, r25
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	80 eb       	ldi	r24, 0xB0	; 176
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	1f 93       	push	r17
     314:	0f 93       	push	r16
     316:	0e 94 ac 0a 	call	0x1558	; 0x1558 <sprintf>
		LCD_sendString(lcdBuffer);
     31a:	c8 01       	movw	r24, r16
     31c:	f6 d2       	rcall	.+1516   	; 0x90a <LCD_sendString>
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	0f c0       	rjmp	.+30     	; 0x348 <showLcdMessagesVars+0x19e>
			
	}else{
		LCD_gotoXY(0,2);
     32a:	62 e0       	ldi	r22, 0x02	; 2
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0a d3       	rcall	.+1556   	; 0x944 <LCD_gotoXY>
		sprintf(lcdBuffer,"Dry Time: DISABLED");
     330:	83 e1       	ldi	r24, 0x13	; 19
     332:	e4 ec       	ldi	r30, 0xC4	; 196
     334:	f1 e0       	ldi	r31, 0x01	; 1
     336:	de 01       	movw	r26, r28
     338:	11 96       	adiw	r26, 0x01	; 1
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <showLcdMessagesVars+0x190>
		LCD_sendString(lcdBuffer);
     342:	ce 01       	movw	r24, r28
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	e1 d2       	rcall	.+1474   	; 0x90a <LCD_sendString>
		
	}
	
	LCD_gotoXY(0,3);
     348:	63 e0       	ldi	r22, 0x03	; 3
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	fb d2       	rcall	.+1526   	; 0x944 <LCD_gotoXY>
	sprintf(lcdBuffer,"Speed: %2d%% T: %2d",rotatioSpeedPercentage,temperature);
     34e:	80 91 0c 01 	lds	r24, 0x010C
     352:	1f 92       	push	r1
     354:	8f 93       	push	r24
     356:	80 91 0d 01 	lds	r24, 0x010D
     35a:	1f 92       	push	r1
     35c:	8f 93       	push	r24
     35e:	87 ed       	ldi	r24, 0xD7	; 215
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	8e 01       	movw	r16, r28
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	1f 93       	push	r17
     36e:	0f 93       	push	r16
     370:	0e 94 ac 0a 	call	0x1558	; 0x1558 <sprintf>
	LCD_sendString(lcdBuffer);
     374:	c8 01       	movw	r24, r16
     376:	c9 d2       	rcall	.+1426   	; 0x90a <LCD_sendString>
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
	
	
	
	
     382:	64 96       	adiw	r28, 0x14	; 20
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	de bf       	out	0x3e, r29	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	cd bf       	out	0x3d, r28	; 61
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	08 95       	ret

00000398 <ADC_calcPreScaler>:
	// grab values é ler pra uma var adcl e adch
	*val = ADCL;
	*val |= (ADCH <<8);
	return 1;
	
}
     398:	28 2f       	mov	r18, r24
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a8 ee       	ldi	r26, 0xE8	; 232
     39e:	b3 e0       	ldi	r27, 0x03	; 3
     3a0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     3a4:	9b 01       	movw	r18, r22
     3a6:	ac 01       	movw	r20, r24
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	74 e2       	ldi	r23, 0x24	; 36
     3ac:	84 ef       	ldi	r24, 0xF4	; 244
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__udivmodsi4>
     3b4:	22 23       	and	r18, r18
     3b6:	74 f0       	brlt	.+28     	; 0x3d4 <ADC_calcPreScaler+0x3c>
     3b8:	22 30       	cpi	r18, 0x02	; 2
     3ba:	70 f0       	brcs	.+28     	; 0x3d8 <ADC_calcPreScaler+0x40>
     3bc:	24 30       	cpi	r18, 0x04	; 4
     3be:	70 f0       	brcs	.+28     	; 0x3dc <ADC_calcPreScaler+0x44>
     3c0:	28 30       	cpi	r18, 0x08	; 8
     3c2:	70 f0       	brcs	.+28     	; 0x3e0 <ADC_calcPreScaler+0x48>
     3c4:	20 31       	cpi	r18, 0x10	; 16
     3c6:	70 f0       	brcs	.+28     	; 0x3e4 <ADC_calcPreScaler+0x4c>
     3c8:	20 32       	cpi	r18, 0x20	; 32
     3ca:	70 f0       	brcs	.+28     	; 0x3e8 <ADC_calcPreScaler+0x50>
     3cc:	20 34       	cpi	r18, 0x40	; 64
     3ce:	70 f4       	brcc	.+28     	; 0x3ec <ADC_calcPreScaler+0x54>
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	08 95       	ret
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	08 95       	ret
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	08 95       	ret
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	08 95       	ret
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	08 95       	ret
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	08 95       	ret
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	08 95       	ret
     3ec:	87 e0       	ldi	r24, 0x07	; 7
     3ee:	08 95       	ret

000003f0 <ADC_init>:
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	c6 2f       	mov	r28, r22
     3f6:	96 b1       	in	r25, 0x06	; 6
     3f8:	89 2b       	or	r24, r25
     3fa:	86 b9       	out	0x06, r24	; 6
     3fc:	d6 b1       	in	r29, 0x06	; 6
     3fe:	84 2f       	mov	r24, r20
     400:	cb df       	rcall	.-106    	; 0x398 <ADC_calcPreScaler>
     402:	8d 2b       	or	r24, r29
     404:	86 b9       	out	0x06, r24	; 6
     406:	c7 b9       	out	0x07, r28	; 7
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <ADC_readAndWAIT>:
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7 (7 channels can be used in single ended input) more on differential input
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits and select the channel(ch)
     40e:	97 b1       	in	r25, 0x07	; 7
/************************************************************************/
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7 (7 channels can be used in single ended input) more on differential input
     410:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits and select the channel(ch)
     412:	98 7f       	andi	r25, 0xF8	; 248
     414:	98 2b       	or	r25, r24
     416:	97 b9       	out	0x07, r25	; 7
	
	
	//-- Start conv
	ADCSRA |= ADC_START_CONV;
     418:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until complete
	while(ADCSRA & ADC_START_CONV);
     41a:	36 99       	sbic	0x06, 6	; 6
     41c:	fe cf       	rjmp	.-4      	; 0x41a <ADC_readAndWAIT+0xc>
	
	// grab values é ler pra uma var adcl e adch
	//ADCL Must be read always first
	val = ADCL;
     41e:	84 b1       	in	r24, 0x04	; 4
	val |= (ADCH <<8);
     420:	25 b1       	in	r18, 0x05	; 5
     422:	90 e0       	ldi	r25, 0x00	; 0
	return val;
	 
     424:	92 2b       	or	r25, r18
     426:	08 95       	ret

00000428 <clearBuffer>:


/************************************************************************/
/* @Clear Buffer                                                        */
/************************************************************************/
void clearBuffer(void){
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0; i< USART_BUFFER_LENGHT; i++) usartBuffer[i]=0;
     42c:	fc 01       	movw	r30, r24
     42e:	e0 55       	subi	r30, 0x50	; 80
     430:	fd 4f       	sbci	r31, 0xFD	; 253
     432:	10 82       	st	Z, r1
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	82 33       	cpi	r24, 0x32	; 50
     438:	91 05       	cpc	r25, r1
     43a:	c1 f7       	brne	.-16     	; 0x42c <clearBuffer+0x4>

}
     43c:	08 95       	ret

0000043e <__vector_1>:
/************************************************************************/

/************************************************************************/
/* handler External Interrupt Request 0                                                                     */
/************************************************************************/
ISR(INT0_vect){
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
	
}
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <__vector_2>:


/************************************************************************/
/* handler External Interrupt Request 1                                                                   */
/************************************************************************/
ISR(INT1_vect){
     452:	1f 92       	push	r1
     454:	0f 92       	push	r0
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	0f 92       	push	r0
     45a:	11 24       	eor	r1, r1
	
}
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <__vector_3>:


/************************************************************************/
/* handler External Interrupt Request 2                                                                    */
/************************************************************************/
ISR(INT2_vect){
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
	
}
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_4>:


/************************************************************************/
/* handler External Interrupt Request 3                                                                    */
/************************************************************************/
ISR(INT3_vect){
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
	
}
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_5>:


/************************************************************************/
/* handler External Interrupt Request 4                                                                   */
/************************************************************************/
ISR(INT4_vect){
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
	
}
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_6>:

/************************************************************************/
/* handler External Interrupt Request 5                                                                    */
/************************************************************************/
ISR(INT5_vect){
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
	
}
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_7>:


/************************************************************************/
/* handler External Interrupt Request 6                                                                  */
/************************************************************************/
ISR(INT6_vect){
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
	
}
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_8>:


/************************************************************************/
/* handler External Interrupt Request 7                                                                   */
/************************************************************************/
ISR(INT7_vect){
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
	
}
     4d4:	0f 90       	pop	r0
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	0f 90       	pop	r0
     4da:	1f 90       	pop	r1
     4dc:	18 95       	reti

000004de <__vector_9>:
/************************************************************************/

/************************************************************************/
/* handler Timer/Counter2 Compare Match                                                                  */
/************************************************************************/
ISR(TIMER2_COMP_vect){
     4de:	1f 92       	push	r1
     4e0:	0f 92       	push	r0
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	0f 92       	push	r0
     4e6:	11 24       	eor	r1, r1
	
}
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_10>:


/************************************************************************/
/* handler Timer/Counter2 Overflow                                                                 */
/************************************************************************/
ISR(TIMER2_OVF_vect){
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
	
	
	
}
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <__vector_11>:


/************************************************************************/
/* handler Timer/Counter1 Capture Event                                                               */
/************************************************************************/
ISR(TIMER1_CAPT_vect){
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
	
}
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <__vector_12>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match A                                                              */
/************************************************************************/
ISR(TIMER1_COMPA_vect){
     51a:	1f 92       	push	r1
     51c:	0f 92       	push	r0
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	0f 92       	push	r0
     522:	11 24       	eor	r1, r1
	
}
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <__vector_13>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match B                                                             */
/************************************************************************/
ISR(TIMER1_COMPB_vect){
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
	
}
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_14>:


/************************************************************************/
/* handler Timer/Counter1 Overflow                                                            */
/************************************************************************/
ISR(TIMER1_OVF_vect){
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
	
}
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_15>:
extern uint8_t flagTaskUsartMessage;

/************************************************************************/
/* handler Timer/Counter0 Compare Match                                                           */
/************************************************************************/
ISR(TIMER0_COMP_vect){
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	af 93       	push	r26
     570:	bf 93       	push	r27
	
		static uint16_t tickCounter;
		// scheduling period
		// control enabled
		tickCounter++;
     572:	20 91 a6 02 	lds	r18, 0x02A6
     576:	30 91 a7 02 	lds	r19, 0x02A7
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	30 93 a7 02 	sts	0x02A7, r19
     582:	20 93 a6 02 	sts	0x02A6, r18
		
		if(tickCounter % taskReadButtonsPeriod == 0) flagTaskReadButtons++;
     586:	60 91 08 01 	lds	r22, 0x0108
     58a:	70 91 09 01 	lds	r23, 0x0109
     58e:	c9 01       	movw	r24, r18
     590:	98 d7       	rcall	.+3888   	; 0x14c2 <__udivmodhi4>
     592:	89 2b       	or	r24, r25
     594:	29 f4       	brne	.+10     	; 0x5a0 <__vector_15+0x4a>
     596:	80 91 ae 02 	lds	r24, 0x02AE
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 ae 02 	sts	0x02AE, r24
		if(tickCounter % taskReadAnalogPeriod == 0) flagTaskReadAnalog++;
     5a0:	60 91 06 01 	lds	r22, 0x0106
     5a4:	70 91 07 01 	lds	r23, 0x0107
     5a8:	c9 01       	movw	r24, r18
     5aa:	8b d7       	rcall	.+3862   	; 0x14c2 <__udivmodhi4>
     5ac:	89 2b       	or	r24, r25
     5ae:	29 f4       	brne	.+10     	; 0x5ba <__vector_15+0x64>
     5b0:	80 91 ad 02 	lds	r24, 0x02AD
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	80 93 ad 02 	sts	0x02AD, r24
		if(tickCounter % taskStateUpdatePeriod == 0) flagTaskStateUpdate++;
     5ba:	60 91 04 01 	lds	r22, 0x0104
     5be:	70 91 05 01 	lds	r23, 0x0105
     5c2:	c9 01       	movw	r24, r18
     5c4:	7e d7       	rcall	.+3836   	; 0x14c2 <__udivmodhi4>
     5c6:	89 2b       	or	r24, r25
     5c8:	29 f4       	brne	.+10     	; 0x5d4 <__vector_15+0x7e>
     5ca:	80 91 ac 02 	lds	r24, 0x02AC
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	80 93 ac 02 	sts	0x02AC, r24
		if(tickCounter % taskLcdPeriod ==0 )flagTaskLcd++;
     5d4:	60 91 02 01 	lds	r22, 0x0102
     5d8:	70 91 03 01 	lds	r23, 0x0103
     5dc:	c9 01       	movw	r24, r18
     5de:	71 d7       	rcall	.+3810   	; 0x14c2 <__udivmodhi4>
     5e0:	89 2b       	or	r24, r25
     5e2:	29 f4       	brne	.+10     	; 0x5ee <__vector_15+0x98>
     5e4:	80 91 ab 02 	lds	r24, 0x02AB
     5e8:	8f 5f       	subi	r24, 0xFF	; 255
     5ea:	80 93 ab 02 	sts	0x02AB, r24
		
		if(tickCounter % taskUpdateOutputPeriod == 0) flagTaskUpdateOutputs++;
     5ee:	60 91 00 01 	lds	r22, 0x0100
     5f2:	70 91 01 01 	lds	r23, 0x0101
     5f6:	c9 01       	movw	r24, r18
     5f8:	64 d7       	rcall	.+3784   	; 0x14c2 <__udivmodhi4>
     5fa:	89 2b       	or	r24, r25
     5fc:	29 f4       	brne	.+10     	; 0x608 <__vector_15+0xb2>
     5fe:	80 91 aa 02 	lds	r24, 0x02AA
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	80 93 aa 02 	sts	0x02AA, r24
		
		
		// reload values // deve dar uns 5segundos
		if(tickCounter > schedulerMaxCount) tickCounter=0;
     608:	80 91 0a 01 	lds	r24, 0x010A
     60c:	90 91 0b 01 	lds	r25, 0x010B
     610:	82 17       	cp	r24, r18
     612:	93 07       	cpc	r25, r19
     614:	20 f4       	brcc	.+8      	; 0x61e <__vector_15+0xc8>
     616:	10 92 a7 02 	sts	0x02A7, r1
     61a:	10 92 a6 02 	sts	0x02A6, r1
	
}
     61e:	bf 91       	pop	r27
     620:	af 91       	pop	r26
     622:	9f 91       	pop	r25
     624:	8f 91       	pop	r24
     626:	7f 91       	pop	r23
     628:	6f 91       	pop	r22
     62a:	5f 91       	pop	r21
     62c:	3f 91       	pop	r19
     62e:	2f 91       	pop	r18
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_16>:


/************************************************************************/
/* handler Timer/Counter0 Overflow     CHECK                            */
/************************************************************************/
ISR(TIMER0_OVF_vect){
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
		
}
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_17>:
/************************************************************************/

/************************************************************************/
/* handler SPI Serial Transfer Complete                                                         */
/************************************************************************/
ISR(SPI_STC_vect){
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
	
}
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <__vector_18>:


/************************************************************************/
/* handler USART0, Rx Complete                                                        */
/************************************************************************/
ISR(USART0_RX_vect){
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	0b b6       	in	r0, 0x3b	; 59
     66e:	0f 92       	push	r0
     670:	2f 93       	push	r18
     672:	3f 93       	push	r19
     674:	4f 93       	push	r20
     676:	5f 93       	push	r21
     678:	6f 93       	push	r22
     67a:	7f 93       	push	r23
     67c:	8f 93       	push	r24
     67e:	9f 93       	push	r25
     680:	af 93       	push	r26
     682:	bf 93       	push	r27
     684:	ef 93       	push	r30
     686:	ff 93       	push	r31
	char c;
	c =USART0_receiveChar();
     688:	2b d2       	rcall	.+1110   	; 0xae0 <USART0_receiveChar>
	// manda caracter para usart 0
	USART1_sendChar(c);
     68a:	ea d1       	rcall	.+980    	; 0xa60 <USART1_sendChar>
}
     68c:	ff 91       	pop	r31
     68e:	ef 91       	pop	r30
     690:	bf 91       	pop	r27
     692:	af 91       	pop	r26
     694:	9f 91       	pop	r25
     696:	8f 91       	pop	r24
     698:	7f 91       	pop	r23
     69a:	6f 91       	pop	r22
     69c:	5f 91       	pop	r21
     69e:	4f 91       	pop	r20
     6a0:	3f 91       	pop	r19
     6a2:	2f 91       	pop	r18
     6a4:	0f 90       	pop	r0
     6a6:	0b be       	out	0x3b, r0	; 59
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_19>:


/************************************************************************/
/* handler USART0 Data Register Empty                                                       */
/************************************************************************/
ISR(USART0_UDRE_vect){
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1

}
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_20>:


/************************************************************************/
/* handler USART0, Tx Complete                                                       */
/************************************************************************/
ISR(USART0_TX_vect){
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1

}
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_21>:
/************************************************************************/

/************************************************************************/
/* handler ADC Conversion Complete                                                    */
/************************************************************************/
ISR(ADC_vect){
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1

}
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_22>:
/************************************************************************/

/************************************************************************/
/* handler EEPROM Ready                                                   */
/************************************************************************/
ISR(EE_READY_vect){
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1

}
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_23>:
/************************************************************************/

/************************************************************************/
/* handler Analog Comparator                                                  */
/************************************************************************/
ISR(ANALOG_COMP_vect){
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1

}
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

00000716 <__vector_24>:
/************************************************************************/

/************************************************************************/
/* handler  Timer/Counter1 Compare Match C                                               */
/************************************************************************/
ISR(TIMER1_COMPC_vect){
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1

}
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_25>:


/************************************************************************/
/* handler Timer/Counter3 Capture Event                                             */
/************************************************************************/
ISR(TIMER3_CAPT_vect){
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1

}
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_26>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match A                                             */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1

}
     748:	0f 90       	pop	r0
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	0f 90       	pop	r0
     74e:	1f 90       	pop	r1
     750:	18 95       	reti

00000752 <__vector_27>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match B                                             */
/************************************************************************/
ISR(TIMER3_COMPB_vect){
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1

}
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_28>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match C                                           */
/************************************************************************/
ISR(TIMER3_COMPC_vect){
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1

}
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_29>:


/************************************************************************/
/* handler Timer/Counter3 Overflow                                           */
/************************************************************************/
ISR(TIMER3_OVF_vect){
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1

}
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_30>:
/************************************************************************/

/************************************************************************/
/* handler USART1, Rx Complete                                                                    */
/************************************************************************/
ISR(USART1_RX_vect){
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	0b b6       	in	r0, 0x3b	; 59
     79a:	0f 92       	push	r0
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	cf 93       	push	r28
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
	char c;

	
	c =USART1_receiveChar();
     7b6:	88 d1       	rcall	.+784    	; 0xac8 <USART1_receiveChar>
     7b8:	c8 2f       	mov	r28, r24
	USART0_sendChar(c); // reply with received char
     7ba:	8e d1       	rcall	.+796    	; 0xad8 <USART0_sendChar>
	if(c== MSG_END_CARACTER){
     7bc:	cc 37       	cpi	r28, 0x7C	; 124
     7be:	31 f4       	brne	.+12     	; 0x7cc <__vector_30+0x3e>
		nReceivedBytes=0;
     7c0:	10 92 e2 02 	sts	0x02E2, r1
		flagNewMessage=1;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 af 02 	sts	0x02AF, r24
		return;
     7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <__vector_30+0x62>
	}
	// save caracter to buffer
	usartBuffer[nReceivedBytes]=c;
     7cc:	e0 91 e2 02 	lds	r30, 0x02E2
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e0 55       	subi	r30, 0x50	; 80
     7d4:	fd 4f       	sbci	r31, 0xFD	; 253
     7d6:	c0 83       	st	Z, r28
	nReceivedBytes++;
     7d8:	80 91 e2 02 	lds	r24, 0x02E2
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	80 93 e2 02 	sts	0x02E2, r24

	// test if buffer underrun	
	if(nReceivedBytes> USART_BUFFER_LENGHT+1){
     7e2:	80 91 e2 02 	lds	r24, 0x02E2
     7e6:	84 33       	cpi	r24, 0x34	; 52
     7e8:	18 f0       	brcs	.+6      	; 0x7f0 <__vector_30+0x62>
		nReceivedBytes=0;
     7ea:	10 92 e2 02 	sts	0x02E2, r1
		clearBuffer();
     7ee:	1c de       	rcall	.-968    	; 0x428 <clearBuffer>
	}
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	cf 91       	pop	r28
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0b be       	out	0x3b, r0	; 59
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <__vector_31>:


/************************************************************************/
/* handler USART1 Data Register Empty                                          */
/************************************************************************/
ISR(USART1_UDRE_vect){
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1

}
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <__vector_32>:


/************************************************************************/
/* handler USART1, Tx Complete                                         */
/************************************************************************/
ISR(USART1_TX_vect){
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1

}
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_33>:


/************************************************************************/
/* handler Two-wire Serial Interface                                       */
/************************************************************************/
ISR(TWI_vect){
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1

}
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_34>:


/************************************************************************/
/* handler Store Program Memory Ready                                       */
/************************************************************************/
ISR(SPM_READY_vect){
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1

}
     85e:	0f 90       	pop	r0
     860:	0f be       	out	0x3f, r0	; 63
     862:	0f 90       	pop	r0
     864:	1f 90       	pop	r1
     866:	18 95       	reti

00000868 <LCD_sendChar>:
	LCD_gotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCD_sendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     868:	98 2f       	mov	r25, r24
     86a:	90 7f       	andi	r25, 0xF0	; 240
     86c:	95 bb       	out	0x15, r25	; 21
     86e:	a8 9a       	sbi	0x15, 0	; 21
     870:	aa 9a       	sbi	0x15, 2	; 21
     872:	ef e8       	ldi	r30, 0x8F	; 143
     874:	f1 e0       	ldi	r31, 0x01	; 1
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <LCD_sendChar+0xe>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <LCD_sendChar+0x14>
     87c:	00 00       	nop
     87e:	aa 98       	cbi	0x15, 2	; 21
     880:	a8 98       	cbi	0x15, 0	; 21
     882:	ef e8       	ldi	r30, 0x8F	; 143
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <LCD_sendChar+0x1e>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <LCD_sendChar+0x24>
     88c:	00 00       	nop
     88e:	f0 e1       	ldi	r31, 0x10	; 16
     890:	8f 9f       	mul	r24, r31
     892:	c0 01       	movw	r24, r0
     894:	11 24       	eor	r1, r1
     896:	85 bb       	out	0x15, r24	; 21
     898:	a8 9a       	sbi	0x15, 0	; 21
     89a:	aa 9a       	sbi	0x15, 2	; 21
     89c:	8f e8       	ldi	r24, 0x8F	; 143
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <LCD_sendChar+0x38>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <LCD_sendChar+0x3e>
     8a6:	00 00       	nop
     8a8:	aa 98       	cbi	0x15, 2	; 21
     8aa:	a8 98       	cbi	0x15, 0	; 21
     8ac:	ef e8       	ldi	r30, 0x8F	; 143
     8ae:	f1 e0       	ldi	r31, 0x01	; 1
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <LCD_sendChar+0x48>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <LCD_sendChar+0x4e>
     8b6:	00 00       	nop
     8b8:	08 95       	ret

000008ba <LCD_sendCommand>:
     8ba:	98 2f       	mov	r25, r24
     8bc:	90 7f       	andi	r25, 0xF0	; 240
     8be:	95 bb       	out	0x15, r25	; 21
     8c0:	aa 9a       	sbi	0x15, 2	; 21
     8c2:	ef e8       	ldi	r30, 0x8F	; 143
     8c4:	f1 e0       	ldi	r31, 0x01	; 1
     8c6:	31 97       	sbiw	r30, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <LCD_sendCommand+0xc>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <LCD_sendCommand+0x12>
     8cc:	00 00       	nop
     8ce:	aa 98       	cbi	0x15, 2	; 21
     8d0:	ef e8       	ldi	r30, 0x8F	; 143
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <LCD_sendCommand+0x1a>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <LCD_sendCommand+0x20>
     8da:	00 00       	nop
     8dc:	f0 e1       	ldi	r31, 0x10	; 16
     8de:	8f 9f       	mul	r24, r31
     8e0:	c0 01       	movw	r24, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	85 bb       	out	0x15, r24	; 21
     8e6:	aa 9a       	sbi	0x15, 2	; 21
     8e8:	8f e8       	ldi	r24, 0x8F	; 143
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <LCD_sendCommand+0x32>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <LCD_sendCommand+0x38>
     8f2:	00 00       	nop
     8f4:	aa 98       	cbi	0x15, 2	; 21
     8f6:	ef e8       	ldi	r30, 0x8F	; 143
     8f8:	f1 e0       	ldi	r31, 0x01	; 1
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_sendCommand+0x40>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCD_sendCommand+0x46>
     900:	00 00       	nop
     902:	08 95       	ret

00000904 <LCD_clr>:
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	d9 cf       	rjmp	.-78     	; 0x8ba <LCD_sendCommand>
     908:	08 95       	ret

0000090a <LCD_sendString>:
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	fc 01       	movw	r30, r24
     914:	01 90       	ld	r0, Z+
     916:	00 20       	and	r0, r0
     918:	e9 f7       	brne	.-6      	; 0x914 <LCD_sendString+0xa>
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	1e 2f       	mov	r17, r30
     91e:	18 1b       	sub	r17, r24
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	59 f0       	breq	.+22     	; 0x93a <LCD_sendString+0x30>
     924:	11 23       	and	r17, r17
     926:	49 f0       	breq	.+18     	; 0x93a <LCD_sendString+0x30>
     928:	08 2f       	mov	r16, r24
     92a:	c0 2f       	mov	r28, r16
     92c:	d9 2f       	mov	r29, r25
     92e:	89 91       	ld	r24, Y+
     930:	9b df       	rcall	.-202    	; 0x868 <LCD_sendChar>
     932:	8c 2f       	mov	r24, r28
     934:	80 1b       	sub	r24, r16
     936:	81 17       	cp	r24, r17
     938:	d0 f3       	brcs	.-12     	; 0x92e <LCD_sendString+0x24>
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <LCD_gotoXY>:
     944:	62 30       	cpi	r22, 0x02	; 2
     946:	31 f0       	breq	.+12     	; 0x954 <LCD_gotoXY+0x10>
     948:	63 30       	cpi	r22, 0x03	; 3
     94a:	31 f0       	breq	.+12     	; 0x958 <LCD_gotoXY+0x14>
     94c:	61 30       	cpi	r22, 0x01	; 1
     94e:	29 f4       	brne	.+10     	; 0x95a <LCD_gotoXY+0x16>
     950:	80 5c       	subi	r24, 0xC0	; 192
     952:	03 c0       	rjmp	.+6      	; 0x95a <LCD_gotoXY+0x16>
     954:	8c 5e       	subi	r24, 0xEC	; 236
     956:	01 c0       	rjmp	.+2      	; 0x95a <LCD_gotoXY+0x16>
     958:	8c 5a       	subi	r24, 0xAC	; 172
     95a:	80 68       	ori	r24, 0x80	; 128
     95c:	ae cf       	rjmp	.-164    	; 0x8ba <LCD_sendCommand>
     95e:	08 95       	ret

00000960 <LCD_defineChar>:


/************************************************************************/
/* @define char                                                                     */
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     96e:	66 0f       	add	r22, r22
     970:	66 0f       	add	r22, r22
     972:	66 0f       	add	r22, r22
     974:	60 64       	ori	r22, 0x40	; 64
     976:	e6 2e       	mov	r14, r22
	for (i=0; i<8; i++){
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	d0 e0       	ldi	r29, 0x00	; 0
     97c:	f8 01       	movw	r30, r16
     97e:	ec 0f       	add	r30, r28
     980:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
     982:	f4 90       	lpm	r15, Z
		LCD_sendCommand(a++);
     984:	8c 2f       	mov	r24, r28
     986:	8e 0d       	add	r24, r14
     988:	98 df       	rcall	.-208    	; 0x8ba <LCD_sendCommand>
		LCD_sendChar(pcc);
     98a:	8f 2d       	mov	r24, r15
     98c:	6d df       	rcall	.-294    	; 0x868 <LCD_sendChar>
/************************************************************************/
void LCD_defineChar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     98e:	21 96       	adiw	r28, 0x01	; 1
     990:	c8 30       	cpi	r28, 0x08	; 8
     992:	d1 05       	cpc	r29, r1
     994:	99 f7       	brne	.-26     	; 0x97c <LCD_defineChar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCD_sendCommand(a++);
		LCD_sendChar(pcc);
		}
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	08 95       	ret

000009a4 <LCD_init>:


/************************************************************************/
/* @init lcd                                                                     */
/************************************************************************/
void LCD_init(void){
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	8f e6       	ldi	r24, 0x6F	; 111
     9ac:	97 e1       	ldi	r25, 0x17	; 23
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <LCD_init+0xa>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <LCD_init+0x10>
     9b4:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     9b6:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
     9b8:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     9ba:	84 b3       	in	r24, 0x14	; 20
     9bc:	80 6f       	ori	r24, 0xF0	; 240
     9be:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     9c0:	84 b3       	in	r24, 0x14	; 20
     9c2:	87 60       	ori	r24, 0x07	; 7
     9c4:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     9c6:	80 e3       	ldi	r24, 0x30	; 48
     9c8:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     9ca:	aa 9a       	sbi	0x15, 2	; 21
     9cc:	8f e8       	ldi	r24, 0x8F	; 143
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <LCD_init+0x2c>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <LCD_init+0x32>
     9d6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     9d8:	aa 98       	cbi	0x15, 2	; 21
     9da:	8f e8       	ldi	r24, 0x8F	; 143
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCD_init+0x3a>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <LCD_init+0x40>
     9e4:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     9e6:	80 e3       	ldi	r24, 0x30	; 48
     9e8:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     9ea:	aa 9a       	sbi	0x15, 2	; 21
     9ec:	8f e8       	ldi	r24, 0x8F	; 143
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <LCD_init+0x4c>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <LCD_init+0x52>
     9f6:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     9f8:	aa 98       	cbi	0x15, 2	; 21
     9fa:	8f e8       	ldi	r24, 0x8F	; 143
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <LCD_init+0x5a>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <LCD_init+0x60>
     a04:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     a06:	80 e2       	ldi	r24, 0x20	; 32
     a08:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     a0a:	aa 9a       	sbi	0x15, 2	; 21
     a0c:	8f e8       	ldi	r24, 0x8F	; 143
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <LCD_init+0x6c>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <LCD_init+0x72>
     a16:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     a18:	aa 98       	cbi	0x15, 2	; 21
     a1a:	8f e8       	ldi	r24, 0x8F	; 143
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <LCD_init+0x7a>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <LCD_init+0x80>
     a24:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCD_sendCommand(0b00101000);
     a26:	88 e2       	ldi	r24, 0x28	; 40
     a28:	48 df       	rcall	.-368    	; 0x8ba <LCD_sendCommand>
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
     a2a:	8c e0       	ldi	r24, 0x0C	; 12
     a2c:	46 df       	rcall	.-372    	; 0x8ba <LCD_sendCommand>
     a2e:	c2 ed       	ldi	r28, 0xD2	; 210
     a30:	d0 e0       	ldi	r29, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     a32:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
     a34:	11 e0       	ldi	r17, 0x01	; 1
     a36:	16 0f       	add	r17, r22
     a38:	ce 01       	movw	r24, r28
     a3a:	92 df       	rcall	.-220    	; 0x960 <LCD_defineChar>
     a3c:	28 96       	adiw	r28, 0x08	; 8
	LCD_sendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCD_sendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     a3e:	18 30       	cpi	r17, 0x08	; 8
     a40:	11 f0       	breq	.+4      	; 0xa46 <LCD_init+0xa2>
	{
		LCD_defineChar((LcdCustomChar+ch),chn++);
     a42:	61 2f       	mov	r22, r17
     a44:	f7 cf       	rjmp	.-18     	; 0xa34 <LCD_init+0x90>
		LCD_defineChar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	08 95       	ret

00000a4e <USART1_config>:
		{
			USART0_sendChar(*(data+i));	//CALL FUNCTION AND SEND CHAR IN THAT POSITION
		}
	}

}
     a4e:	90 93 98 00 	sts	0x0098, r25
     a52:	80 93 99 00 	sts	0x0099, r24
     a56:	40 93 9a 00 	sts	0x009A, r20
     a5a:	60 93 9d 00 	sts	0x009D, r22
     a5e:	08 95       	ret

00000a60 <USART1_sendChar>:
     a60:	eb e9       	ldi	r30, 0x9B	; 155
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	90 81       	ld	r25, Z
     a66:	95 ff       	sbrs	r25, 5
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <USART1_sendChar+0x4>
     a6a:	80 93 9c 00 	sts	0x009C, r24
     a6e:	08 95       	ret

00000a70 <USART1_sendStr>:
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	fc 01       	movw	r30, r24
     a7e:	dc 01       	movw	r26, r24
     a80:	0d 90       	ld	r0, X+
     a82:	00 20       	and	r0, r0
     a84:	e9 f7       	brne	.-6      	; 0xa80 <USART1_sendStr+0x10>
     a86:	11 97       	sbiw	r26, 0x01	; 1
     a88:	7d 01       	movw	r14, r26
     a8a:	e8 1a       	sub	r14, r24
     a8c:	f9 0a       	sbc	r15, r25
     a8e:	1e 14       	cp	r1, r14
     a90:	1f 04       	cpc	r1, r15
     a92:	9c f4       	brge	.+38     	; 0xaba <USART1_sendStr+0x4a>
     a94:	80 81       	ld	r24, Z
     a96:	88 23       	and	r24, r24
     a98:	81 f0       	breq	.+32     	; 0xaba <USART1_sendStr+0x4a>
     a9a:	8f 01       	movw	r16, r30
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <USART1_sendStr+0x40>
     aa6:	f8 01       	movw	r30, r16
     aa8:	81 91       	ld	r24, Z+
     aaa:	8f 01       	movw	r16, r30
     aac:	88 23       	and	r24, r24
     aae:	29 f0       	breq	.+10     	; 0xaba <USART1_sendStr+0x4a>
     ab0:	d7 df       	rcall	.-82     	; 0xa60 <USART1_sendChar>
     ab2:	21 96       	adiw	r28, 0x01	; 1
     ab4:	ec 16       	cp	r14, r28
     ab6:	fd 06       	cpc	r15, r29
     ab8:	b1 f7       	brne	.-20     	; 0xaa6 <USART1_sendStr+0x36>
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <USART1_receiveChar>:
     ac8:	eb e9       	ldi	r30, 0x9B	; 155
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	88 23       	and	r24, r24
     ad0:	ec f7       	brge	.-6      	; 0xacc <USART1_receiveChar+0x4>
     ad2:	80 91 9c 00 	lds	r24, 0x009C
     ad6:	08 95       	ret

00000ad8 <USART0_sendChar>:
     ad8:	5d 9b       	sbis	0x0b, 5	; 11
     ada:	fe cf       	rjmp	.-4      	; 0xad8 <USART0_sendChar>
     adc:	8c b9       	out	0x0c, r24	; 12
     ade:	08 95       	ret

00000ae0 <USART0_receiveChar>:
/************************************************************************/
/* USART RECEIVE CHAR                                                   */
/************************************************************************/
char USART0_receiveChar(void){
	//wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );	// do nothing
     ae0:	5f 9b       	sbis	0x0b, 7	; 11
     ae2:	fe cf       	rjmp	.-4      	; 0xae0 <USART0_receiveChar>
	
	return UDR0;
     ae4:	8c b1       	in	r24, 0x0c	; 12
}
     ae6:	08 95       	ret

00000ae8 <paramLoadDefaultParameters>:
/* load default parameters                                                                     */
/************************************************************************/
void paramLoadDefaultParameters(void){
	
	// STATES DEFAULT
	washingMaxTime = WASHING_MAX_TIME_DEFAULT;
     ae8:	84 eb       	ldi	r24, 0xB4	; 180
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 19 01 	sts	0x0119, r25
     af0:	80 93 18 01 	sts	0x0118, r24
	washingMinTime = WASHING_MIN_TIME_DEFAULT;
     af4:	24 e1       	ldi	r18, 0x14	; 20
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	30 93 17 01 	sts	0x0117, r19
     afc:	20 93 16 01 	sts	0x0116, r18
	drywingMaxTime = DRYING_MAX_TIME_DEFAULT;
     b00:	90 93 15 01 	sts	0x0115, r25
     b04:	80 93 14 01 	sts	0x0114, r24
	drywingMinTime = DRYING_MIN_TIME_DEFAULT;
     b08:	8a e0       	ldi	r24, 0x0A	; 10
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 13 01 	sts	0x0113, r25
     b10:	80 93 12 01 	sts	0x0112, r24
	
	rotationMax = ROTATION_MAX_DEFAULT;
     b14:	80 ed       	ldi	r24, 0xD0	; 208
     b16:	97 e0       	ldi	r25, 0x07	; 7
     b18:	90 93 f1 02 	sts	0x02F1, r25
     b1c:	80 93 f0 02 	sts	0x02F0, r24
	rotationMin = ROTATION_MIN_DEFAULT;
     b20:	88 ec       	ldi	r24, 0xC8	; 200
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 01 03 	sts	0x0301, r25
     b28:	80 93 00 03 	sts	0x0300, r24
     b2c:	08 95       	ret

00000b2e <eepromSetDefaultParameters>:

/************************************************************************/
/* @ set initial values to eeprom  if nothin there yet                                                                   */
/************************************************************************/
void eepromSetDefaultParameters(){
	eestruct_var.initEeprom=1; // emprom init
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 e3 02 	sts	0x02E3, r24
	
	// STATUS
	eestruct_var.washingMaxTime = WASHING_MAX_TIME_DEFAULT;
     b34:	84 eb       	ldi	r24, 0xB4	; 180
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 e5 02 	sts	0x02E5, r25
     b3c:	80 93 e4 02 	sts	0x02E4, r24
	eestruct_var.washingMinTime = WASHING_MIN_TIME_DEFAULT;
     b40:	24 e1       	ldi	r18, 0x14	; 20
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	30 93 e7 02 	sts	0x02E7, r19
     b48:	20 93 e6 02 	sts	0x02E6, r18
	eestruct_var.drywingMaxTime = DRYING_MAX_TIME_DEFAULT;
     b4c:	90 93 e9 02 	sts	0x02E9, r25
     b50:	80 93 e8 02 	sts	0x02E8, r24
	eestruct_var.drywingMinTime = DRYING_MIN_TIME_DEFAULT;
     b54:	8a e0       	ldi	r24, 0x0A	; 10
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 93 eb 02 	sts	0x02EB, r25
     b5c:	80 93 ea 02 	sts	0x02EA, r24
	
	eestruct_var.rotationMax = ROTATION_MAX_DEFAULT;
     b60:	80 ed       	ldi	r24, 0xD0	; 208
     b62:	97 e0       	ldi	r25, 0x07	; 7
     b64:	90 93 ed 02 	sts	0x02ED, r25
     b68:	80 93 ec 02 	sts	0x02EC, r24
	eestruct_var.rotationMin = ROTATION_MIN_DEFAULT;
     b6c:	88 ec       	ldi	r24, 0xC8	; 200
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 ef 02 	sts	0x02EF, r25
     b74:	80 93 ee 02 	sts	0x02EE, r24
	
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
     b78:	4d e0       	ldi	r20, 0x0D	; 13
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	83 ee       	ldi	r24, 0xE3	; 227
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	15 c7       	rjmp	.+3626   	; 0x19b0 <__eewr_block_m128>
     b86:	08 95       	ret

00000b88 <paramLoadFromEeprom>:
/* @restore to EEPROM                                                                     */
/************************************************************************/
void paramLoadFromEeprom(){
	//uint8_t temp=0;
	// read from emprom
	eeprom_read_block((void*)&eestruct_var, (const void*)&eestruct_eemem,sizeof(eestruct_t));
     b88:	4d e0       	ldi	r20, 0x0D	; 13
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	83 ee       	ldi	r24, 0xE3	; 227
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	fd d6       	rcall	.+3578   	; 0x1990 <__eerd_block_m128>
	
	// test the fits field to check if it was written else use default and load
	if((eestruct_var.initEeprom &0xFF) ==0xFF){
     b96:	80 91 e3 02 	lds	r24, 0x02E3
     b9a:	8f 3f       	cpi	r24, 0xFF	; 255
     b9c:	19 f4       	brne	.+6      	; 0xba4 <paramLoadFromEeprom+0x1c>
		eepromSetDefaultParameters();
     b9e:	c7 df       	rcall	.-114    	; 0xb2e <eepromSetDefaultParameters>
		paramLoadDefaultParameters();
     ba0:	a3 cf       	rjmp	.-186    	; 0xae8 <paramLoadDefaultParameters>
     ba2:	08 95       	ret
		
	}
	else{
		// write to the global variables
		washingMaxTime = eestruct_var.washingMaxTime;
     ba4:	80 91 e4 02 	lds	r24, 0x02E4
     ba8:	90 91 e5 02 	lds	r25, 0x02E5
     bac:	90 93 19 01 	sts	0x0119, r25
     bb0:	80 93 18 01 	sts	0x0118, r24
		washingMinTime = eestruct_var.washingMinTime;
     bb4:	80 91 e6 02 	lds	r24, 0x02E6
     bb8:	90 91 e7 02 	lds	r25, 0x02E7
     bbc:	90 93 17 01 	sts	0x0117, r25
     bc0:	80 93 16 01 	sts	0x0116, r24
		drywingMaxTime = eestruct_var.drywingMaxTime;
     bc4:	80 91 e8 02 	lds	r24, 0x02E8
     bc8:	90 91 e9 02 	lds	r25, 0x02E9
     bcc:	90 93 15 01 	sts	0x0115, r25
     bd0:	80 93 14 01 	sts	0x0114, r24
		drywingMinTime = eestruct_var.drywingMinTime;
     bd4:	80 91 ea 02 	lds	r24, 0x02EA
     bd8:	90 91 eb 02 	lds	r25, 0x02EB
     bdc:	90 93 13 01 	sts	0x0113, r25
     be0:	80 93 12 01 	sts	0x0112, r24
		
		rotationMax = eestruct_var.rotationMax;
     be4:	80 91 ec 02 	lds	r24, 0x02EC
     be8:	90 91 ed 02 	lds	r25, 0x02ED
     bec:	90 93 f1 02 	sts	0x02F1, r25
     bf0:	80 93 f0 02 	sts	0x02F0, r24
		rotationMin = eestruct_var.rotationMin;
     bf4:	80 91 ee 02 	lds	r24, 0x02EE
     bf8:	90 91 ef 02 	lds	r25, 0x02EF
     bfc:	90 93 01 03 	sts	0x0301, r25
     c00:	80 93 00 03 	sts	0x0300, r24
     c04:	08 95       	ret

00000c06 <paramSavetoEeprom>:
/************************************************************************/
void paramSavetoEeprom(){
	
	
	// save paramenetrs on the run
	eestruct_var.initEeprom=1; // emprom init
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 e3 02 	sts	0x02E3, r24
	
	eestruct_var.washingMaxTime = washingMaxTime;
     c0c:	80 91 18 01 	lds	r24, 0x0118
     c10:	90 91 19 01 	lds	r25, 0x0119
     c14:	90 93 e5 02 	sts	0x02E5, r25
     c18:	80 93 e4 02 	sts	0x02E4, r24
	eestruct_var.washingMinTime = washingMinTime;
     c1c:	80 91 16 01 	lds	r24, 0x0116
     c20:	90 91 17 01 	lds	r25, 0x0117
     c24:	90 93 e7 02 	sts	0x02E7, r25
     c28:	80 93 e6 02 	sts	0x02E6, r24
	eestruct_var.drywingMaxTime = drywingMaxTime;
     c2c:	80 91 14 01 	lds	r24, 0x0114
     c30:	90 91 15 01 	lds	r25, 0x0115
     c34:	90 93 e9 02 	sts	0x02E9, r25
     c38:	80 93 e8 02 	sts	0x02E8, r24
	eestruct_var.drywingMinTime = drywingMinTime;
     c3c:	80 91 12 01 	lds	r24, 0x0112
     c40:	90 91 13 01 	lds	r25, 0x0113
     c44:	90 93 eb 02 	sts	0x02EB, r25
     c48:	80 93 ea 02 	sts	0x02EA, r24
	
	eestruct_var.rotationMax = rotationMax;
     c4c:	80 91 f0 02 	lds	r24, 0x02F0
     c50:	90 91 f1 02 	lds	r25, 0x02F1
     c54:	90 93 ed 02 	sts	0x02ED, r25
     c58:	80 93 ec 02 	sts	0x02EC, r24
	eestruct_var.rotationMin = rotationMin;
     c5c:	80 91 00 03 	lds	r24, 0x0300
     c60:	90 91 01 03 	lds	r25, 0x0301
     c64:	90 93 ef 02 	sts	0x02EF, r25
     c68:	80 93 ee 02 	sts	0x02EE, r24
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
     c6c:	4d e0       	ldi	r20, 0x0D	; 13
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	83 ee       	ldi	r24, 0xE3	; 227
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	9b c6       	rjmp	.+3382   	; 0x19b0 <__eewr_block_m128>
     c7a:	08 95       	ret

00000c7c <configPWM>:
	//The formula for Fast PWM
	//F(PWM) = F(Clock)/(N*(1+TOP)
	// max 245 Hz at 16mhz with full top
	
	// fast pwm, mode 14, noninverted output, prescaler 1024 //32
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);
     c7c:	82 ea       	ldi	r24, 0xA2	; 162
     c7e:	8f bd       	out	0x2f, r24	; 47
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS01) |  (1<<CS00);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS00);
     c80:	89 e1       	ldi	r24, 0x19	; 25
     c82:	8e bd       	out	0x2e, r24	; 46
	
	//ICR1 = (F_CPU[MHz] * periode[us] / prescaler) - 1
	ICR1   = MAX_PWM_VALUE;           // periode cca 0.5s / 8 MHz
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	9a e0       	ldi	r25, 0x0A	; 10
     c88:	97 bd       	out	0x27, r25	; 39
     c8a:	86 bd       	out	0x26, r24	; 38
	
	DDRB   = (1<<5);//|(1<<6);  // output pins OC1A, OC1B   Mega16,32
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	87 bb       	out	0x17, r24	; 23
	
	OCR1A = 0;          // duty cycle = 20 percent
     c90:	1b bc       	out	0x2b, r1	; 43
     c92:	1a bc       	out	0x2a, r1	; 42
     c94:	08 95       	ret

00000c96 <setMotorSpeed>:
/* @ set motor Speed                                                                     */
/************************************************************************/
void setMotorSpeed(uint8_t duty){
	
	uint16_t pwmVal;
	if(duty >100){
     c96:	85 36       	cpi	r24, 0x65	; 101
     c98:	88 f4       	brcc	.+34     	; 0xcbc <setMotorSpeed+0x26>
		pwmVal = MAX_PWM_VALUE;
	}else{
		pwmVal = (uint16_t)((MAX_PWM_VALUE*(uint16_t)duty)/(uint16_t) 100);
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	5a e0       	ldi	r21, 0x0A	; 10
     c9e:	84 9f       	mul	r24, r20
     ca0:	90 01       	movw	r18, r0
     ca2:	85 9f       	mul	r24, r21
     ca4:	30 0d       	add	r19, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	36 95       	lsr	r19
     caa:	27 95       	ror	r18
     cac:	36 95       	lsr	r19
     cae:	27 95       	ror	r18
     cb0:	ab e7       	ldi	r26, 0x7B	; 123
     cb2:	b4 e1       	ldi	r27, 0x14	; 20
     cb4:	42 d4       	rcall	.+2180   	; 0x153a <__umulhisi3>
     cb6:	96 95       	lsr	r25
     cb8:	87 95       	ror	r24
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <setMotorSpeed+0x2a>
/************************************************************************/
void setMotorSpeed(uint8_t duty){
	
	uint16_t pwmVal;
	if(duty >100){
		pwmVal = MAX_PWM_VALUE;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	9a e0       	ldi	r25, 0x0A	; 10
	}else{
		pwmVal = (uint16_t)((MAX_PWM_VALUE*(uint16_t)duty)/(uint16_t) 100);
	}

	OCR1A =pwmVal;
     cc0:	9b bd       	out	0x2b, r25	; 43
     cc2:	8a bd       	out	0x2a, r24	; 42
     cc4:	08 95       	ret

00000cc6 <stateMachine>:
extern uint8_t stateMode;
extern uint8_t stateProgram;
/************************************************************************/
/* State Machine Process                                                                    */
/************************************************************************/
void stateMachine(uint8_t sig){
     cc6:	cf 93       	push	r28
     cc8:	c8 2f       	mov	r28, r24
	
	static uint16_t time;
	switch(stateMode){
     cca:	40 91 f8 02 	lds	r20, 0x02F8
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	49 30       	cpi	r20, 0x09	; 9
     cd2:	51 05       	cpc	r21, r1
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <stateMachine+0x12>
     cd6:	af c0       	rjmp	.+350    	; 0xe36 <stateMachine+0x170>
     cd8:	fa 01       	movw	r30, r20
     cda:	e1 5b       	subi	r30, 0xB1	; 177
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	27 c4       	rjmp	.+2126   	; 0x152e <__tablejump2__>
		
		case STATE_IDLE:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_IDLE\n\r");
     ce0:	8b ee       	ldi	r24, 0xEB	; 235
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	c5 de       	rcall	.-630    	; 0xa70 <USART1_sendStr>
			#endif
			
			washingCurrent=washingTime;
     ce6:	80 91 10 01 	lds	r24, 0x0110
     cea:	90 91 11 01 	lds	r25, 0x0111
     cee:	90 93 ff 02 	sts	0x02FF, r25
     cf2:	80 93 fe 02 	sts	0x02FE, r24
			dryingCurrent =dryingTime;
     cf6:	80 91 0e 01 	lds	r24, 0x010E
     cfa:	90 91 0f 01 	lds	r25, 0x010F
     cfe:	90 93 fc 02 	sts	0x02FC, r25
     d02:	80 93 fb 02 	sts	0x02FB, r24
			
			if(emptyReservoirSensor==SENSOR_ACTIVE){
     d06:	80 91 fa 02 	lds	r24, 0x02FA
     d0a:	81 11       	cpse	r24, r1
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <stateMachine+0x58>
				if(diskInSensor == SENSOR_ACTIVE){
     d0e:	80 91 f5 02 	lds	r24, 0x02F5
     d12:	81 11       	cpse	r24, r1
     d14:	92 c0       	rjmp	.+292    	; 0xe3a <stateMachine+0x174>
					stateMode=STATE_READY;
     d16:	87 e0       	ldi	r24, 0x07	; 7
     d18:	80 93 f8 02 	sts	0x02F8, r24
     d1c:	8e c0       	rjmp	.+284    	; 0xe3a <stateMachine+0x174>
				}
			}else{
				 stateMode = STATE_EMPTY;
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 93 f8 02 	sts	0x02F8, r24
     d24:	8a c0       	rjmp	.+276    	; 0xe3a <stateMachine+0x174>
		break;
		
		
		case STATE_READY:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_READY\n\r");
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	a2 de       	rcall	.-700    	; 0xa70 <USART1_sendStr>
			#endif
			washingCurrent=washingTime;
     d2c:	20 91 10 01 	lds	r18, 0x0110
     d30:	30 91 11 01 	lds	r19, 0x0111
     d34:	30 93 ff 02 	sts	0x02FF, r19
     d38:	20 93 fe 02 	sts	0x02FE, r18
			dryingCurrent =dryingTime;
     d3c:	20 91 0e 01 	lds	r18, 0x010E
     d40:	30 91 0f 01 	lds	r19, 0x010F
     d44:	30 93 fc 02 	sts	0x02FC, r19
     d48:	20 93 fb 02 	sts	0x02FB, r18
			
			if(!diskInSensor == SENSOR_ACTIVE){
     d4c:	80 91 f5 02 	lds	r24, 0x02F5
     d50:	88 23       	and	r24, r24
     d52:	19 f0       	breq	.+6      	; 0xd5a <stateMachine+0x94>
				stateMode = STATE_IDLE;
     d54:	10 92 f8 02 	sts	0x02F8, r1
     d58:	70 c0       	rjmp	.+224    	; 0xe3a <stateMachine+0x174>
			
			}
			else if(sig == START_BUTTON && diskInSensor == SENSOR_ACTIVE){
     d5a:	c1 30       	cpi	r28, 0x01	; 1
     d5c:	09 f0       	breq	.+2      	; 0xd60 <stateMachine+0x9a>
     d5e:	6d c0       	rjmp	.+218    	; 0xe3a <stateMachine+0x174>
				stateMode = STATE_FILLING;
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	80 93 f8 02 	sts	0x02F8, r24
     d66:	69 c0       	rjmp	.+210    	; 0xe3a <stateMachine+0x174>
		
		break;
		
		case STATE_FILLING:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_FILLING\n\r");
     d68:	84 e1       	ldi	r24, 0x14	; 20
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	81 de       	rcall	.-766    	; 0xa70 <USART1_sendStr>
			#endif
			
			if(filledTankSensor==SENSOR_ACTIVE){
     d6e:	80 91 f2 02 	lds	r24, 0x02F2
     d72:	81 11       	cpse	r24, r1
     d74:	62 c0       	rjmp	.+196    	; 0xe3a <stateMachine+0x174>
				
				stateMode = STATE_WASHING;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	80 93 f8 02 	sts	0x02F8, r24
     d7c:	5e c0       	rjmp	.+188    	; 0xe3a <stateMachine+0x174>
			}
		break;
		
		case STATE_WASHING:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_WASHING\n\r");
     d7e:	8b e2       	ldi	r24, 0x2B	; 43
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	76 de       	rcall	.-788    	; 0xa70 <USART1_sendStr>
			#endif
			
			washingCurrent--;
     d84:	80 91 fe 02 	lds	r24, 0x02FE
     d88:	90 91 ff 02 	lds	r25, 0x02FF
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	90 93 ff 02 	sts	0x02FF, r25
     d92:	80 93 fe 02 	sts	0x02FE, r24
			if(washingCurrent <= 0){
     d96:	89 2b       	or	r24, r25
     d98:	09 f0       	breq	.+2      	; 0xd9c <stateMachine+0xd6>
     d9a:	4f c0       	rjmp	.+158    	; 0xe3a <stateMachine+0x174>
				stateMode = STATE_UNFILLING;
     d9c:	88 e0       	ldi	r24, 0x08	; 8
     d9e:	80 93 f8 02 	sts	0x02F8, r24
     da2:	4b c0       	rjmp	.+150    	; 0xe3a <stateMachine+0x174>
			}
		break;
		
		case STATE_UNFILLING:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_UNFILLING\n\r");
     da4:	82 e4       	ldi	r24, 0x42	; 66
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	63 de       	rcall	.-826    	; 0xa70 <USART1_sendStr>
			#endif
			if(!emptyTankSensor == SENSOR_ACTIVE){
     daa:	80 91 f9 02 	lds	r24, 0x02F9
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <stateMachine+0xee>
     db2:	43 c0       	rjmp	.+134    	; 0xe3a <stateMachine+0x174>
				if(dryingTime < drywingMinTime){
     db4:	80 91 0e 01 	lds	r24, 0x010E
     db8:	90 91 0f 01 	lds	r25, 0x010F
     dbc:	20 91 12 01 	lds	r18, 0x0112
     dc0:	30 91 13 01 	lds	r19, 0x0113
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	18 f4       	brcc	.+6      	; 0xdd0 <stateMachine+0x10a>
					stateMode = STATE_IDLE;
     dca:	10 92 f8 02 	sts	0x02F8, r1
     dce:	35 c0       	rjmp	.+106    	; 0xe3a <stateMachine+0x174>
				}else{
					dryingCurrent = dryingTime;
     dd0:	90 93 fc 02 	sts	0x02FC, r25
     dd4:	80 93 fb 02 	sts	0x02FB, r24
					stateMode = STATE_DRYING;	
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	80 93 f8 02 	sts	0x02F8, r24
     dde:	2d c0       	rjmp	.+90     	; 0xe3a <stateMachine+0x174>
			}
		break;
		
		case STATE_DRYING:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_DRYING\n\r");
     de0:	8b e5       	ldi	r24, 0x5B	; 91
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	45 de       	rcall	.-886    	; 0xa70 <USART1_sendStr>
			#endif
			
			dryingCurrent--;
     de6:	80 91 fb 02 	lds	r24, 0x02FB
     dea:	90 91 fc 02 	lds	r25, 0x02FC
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	90 93 fc 02 	sts	0x02FC, r25
     df4:	80 93 fb 02 	sts	0x02FB, r24
			if(dryingCurrent <= 0){
     df8:	89 2b       	or	r24, r25
     dfa:	f9 f4       	brne	.+62     	; 0xe3a <stateMachine+0x174>
				stateMode = STATE_FINISHED;
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	80 93 f8 02 	sts	0x02F8, r24
     e02:	1b c0       	rjmp	.+54     	; 0xe3a <stateMachine+0x174>
			}
		break;
		
		case STATE_EMPTY:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_EMPTY\n\r");
     e04:	81 e7       	ldi	r24, 0x71	; 113
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	33 de       	rcall	.-922    	; 0xa70 <USART1_sendStr>
			#endif

			// activate beep
			flagBeep=1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 f4 02 	sts	0x02F4, r24
			if(!emptyReservoirSensor==SENSOR_ACTIVE){
     e10:	80 91 fa 02 	lds	r24, 0x02FA
     e14:	88 23       	and	r24, r24
     e16:	89 f0       	breq	.+34     	; 0xe3a <stateMachine+0x174>
				stateMode = STATE_IDLE;
     e18:	10 92 f8 02 	sts	0x02F8, r1
				flagBeep=0;	
     e1c:	10 92 f4 02 	sts	0x02F4, r1
     e20:	0c c0       	rjmp	.+24     	; 0xe3a <stateMachine+0x174>
			} // SET CLEAR
		break;
		
		case STATE_FINISHED:
			#ifdef DEBUG_STATE
			USART1_sendStr("STATE: STATE_FINISHED\n\r");
     e22:	86 e8       	ldi	r24, 0x86	; 134
     e24:	92 e0       	ldi	r25, 0x02	; 2
     e26:	24 de       	rcall	.-952    	; 0xa70 <USART1_sendStr>
			#endif
		
			if(!diskInSensor==SENSOR_ACTIVE){
     e28:	80 91 f5 02 	lds	r24, 0x02F5
     e2c:	88 23       	and	r24, r24
     e2e:	29 f0       	breq	.+10     	; 0xe3a <stateMachine+0x174>
				stateMode = STATE_IDLE;
     e30:	10 92 f8 02 	sts	0x02F8, r1
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <stateMachine+0x174>
			}
		break;
		
		default:
			stateMode = STATE_IDLE;
     e36:	10 92 f8 02 	sts	0x02F8, r1
		break;
	}
	
}
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <stateMachineProgram>:
/************************************************************************/
/* @State Machine for Program params                                                                     */
/************************************************************************/
void stateMachineProgram(uint8_t sig){
	
	switch(stateProgram){
     e3e:	40 91 f3 02 	lds	r20, 0x02F3
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	fa 01       	movw	r30, r20
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	e8 30       	cpi	r30, 0x08	; 8
     e4a:	f1 05       	cpc	r31, r1
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <stateMachineProgram+0x12>
     e4e:	5b c0       	rjmp	.+182    	; 0xf06 <stateMachineProgram+0xc8>
     e50:	e8 5a       	subi	r30, 0xA8	; 168
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	6c c3       	rjmp	.+1752   	; 0x152e <__tablejump2__>
		
		case PRG_STATE_RUN:
			

			if(sig == PRG_BUTTON) stateProgram = PRG_STATE_ROT_SET_MAX;
     e56:	86 30       	cpi	r24, 0x06	; 6
     e58:	09 f0       	breq	.+2      	; 0xe5c <stateMachineProgram+0x1e>
     e5a:	58 c0       	rjmp	.+176    	; 0xf0c <stateMachineProgram+0xce>
     e5c:	80 93 f3 02 	sts	0x02F3, r24
     e60:	08 95       	ret
		break;
		
		case PRG_STATE_ROT_SET_MAX:
			if(sig == ENTER_BUTTON) stateProgram = PRG_STATE_ROT_SET_MIN;
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	21 f4       	brne	.+8      	; 0xe6e <stateMachineProgram+0x30>
     e66:	87 e0       	ldi	r24, 0x07	; 7
     e68:	80 93 f3 02 	sts	0x02F3, r24
     e6c:	08 95       	ret
			if(sig == UP_BUTTON); // SET UP
			if(sig == DOWN_BUTTON); // SET DOWN
			if(sig == ESC_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     e6e:	83 30       	cpi	r24, 0x03	; 3
     e70:	09 f0       	breq	.+2      	; 0xe74 <stateMachineProgram+0x36>
     e72:	4c c0       	rjmp	.+152    	; 0xf0c <stateMachineProgram+0xce>
     e74:	88 e0       	ldi	r24, 0x08	; 8
     e76:	80 93 f3 02 	sts	0x02F3, r24
     e7a:	08 95       	ret
		break;
		
		case PRG_STATE_ROT_SET_MIN:
			if(sig == ENTER_BUTTON) stateProgram = PRG_STATE_WAS_SET_MAX;
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	21 f4       	brne	.+8      	; 0xe88 <stateMachineProgram+0x4a>
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	80 93 f3 02 	sts	0x02F3, r24
     e86:	08 95       	ret
			if(sig == UP_BUTTON); // SET UP
			if(sig == DOWN_BUTTON); // SET DOWN
			if(sig == ESC_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	09 f0       	breq	.+2      	; 0xe8e <stateMachineProgram+0x50>
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <stateMachineProgram+0xce>
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	80 93 f3 02 	sts	0x02F3, r24
     e94:	08 95       	ret
		break;
		
		case PRG_STATE_WAS_SET_MAX:
			if(sig == ENTER_BUTTON) stateProgram = PRG_STATE_WAS_SET_MIN;
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	21 f4       	brne	.+8      	; 0xea2 <stateMachineProgram+0x64>
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	80 93 f3 02 	sts	0x02F3, r24
     ea0:	08 95       	ret
			if(sig == UP_BUTTON); // SET UP
			if(sig == DOWN_BUTTON); // SET DOWN
			if(sig == ESC_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	99 f5       	brne	.+102    	; 0xf0c <stateMachineProgram+0xce>
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	80 93 f3 02 	sts	0x02F3, r24
     eac:	08 95       	ret
		break;
		
		
		case PRG_STATE_WAS_SET_MIN:
			if(sig == ENTER_BUTTON) stateProgram = PRG_STATE_DRY_SET_MAX;
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	19 f4       	brne	.+6      	; 0xeb8 <stateMachineProgram+0x7a>
     eb2:	80 93 f3 02 	sts	0x02F3, r24
     eb6:	08 95       	ret
			if(sig == UP_BUTTON); // SET UP
			if(sig == DOWN_BUTTON); // SET DOWN
			if(sig == ESC_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	41 f5       	brne	.+80     	; 0xf0c <stateMachineProgram+0xce>
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	80 93 f3 02 	sts	0x02F3, r24
     ec2:	08 95       	ret
		break;
		
		case PRG_STATE_DRY_SET_MAX:
			if(sig == ENTER_BUTTON) stateProgram = PRG_STATE_WAS_SET_MIN;
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	21 f4       	brne	.+8      	; 0xed0 <stateMachineProgram+0x92>
     ec8:	85 e0       	ldi	r24, 0x05	; 5
     eca:	80 93 f3 02 	sts	0x02F3, r24
     ece:	08 95       	ret
			if(sig == UP_BUTTON); // SET UP
			if(sig == DOWN_BUTTON); // SET DOWN
			if(sig == ESC_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	e1 f4       	brne	.+56     	; 0xf0c <stateMachineProgram+0xce>
     ed4:	88 e0       	ldi	r24, 0x08	; 8
     ed6:	80 93 f3 02 	sts	0x02F3, r24
     eda:	08 95       	ret
		break;
		
		
		case PRG_STATE_DRY_SET_MIN:
			if(sig == ENTER_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	21 f4       	brne	.+8      	; 0xee8 <stateMachineProgram+0xaa>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	80 93 f3 02 	sts	0x02F3, r24
     ee6:	08 95       	ret
			if(sig == UP_BUTTON); // SET UP
			if(sig == DOWN_BUTTON); // SET DOWN
			if(sig == ESC_BUTTON) stateProgram = PRG_STATE_SAVE_PARAMS;
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	81 f4       	brne	.+32     	; 0xf0c <stateMachineProgram+0xce>
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	80 93 f3 02 	sts	0x02F3, r24
     ef2:	08 95       	ret
		break;
		
		
		case PRG_STATE_SAVE_PARAMS:
			flagSaveParams++;
     ef4:	80 91 fd 02 	lds	r24, 0x02FD
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 fd 02 	sts	0x02FD, r24
			stateProgram = PRG_STATE_RUN;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 f3 02 	sts	0x02F3, r24
		break;
     f04:	08 95       	ret
		
		default:
			stateProgram= PRG_STATE_RUN;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 f3 02 	sts	0x02F3, r24
     f0c:	08 95       	ret

00000f0e <decodeOutputs>:
/************************************************************************/
/* Set Outputs                                                                      */
/************************************************************************/
void decodeOutputs(uint8_t state){
	
	switch(stateMode){
     f0e:	80 91 f8 02 	lds	r24, 0x02F8
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	89 30       	cpi	r24, 0x09	; 9
     f16:	91 05       	cpc	r25, r1
     f18:	08 f0       	brcs	.+2      	; 0xf1c <decodeOutputs+0xe>
     f1a:	91 c0       	rjmp	.+290    	; 0x103e <decodeOutputs+0x130>
     f1c:	fc 01       	movw	r30, r24
     f1e:	e0 5a       	subi	r30, 0xA0	; 160
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	05 c3       	rjmp	.+1546   	; 0x152e <__tablejump2__>
		
		case STATE_IDLE:
			setMotorSpeed(0);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	b7 de       	rcall	.-658    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_OFF;
     f28:	e2 e6       	ldi	r30, 0x62	; 98
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	80 83       	st	Z, r24
			PUMP_OFF;
     f32:	80 81       	ld	r24, Z
     f34:	8d 7f       	andi	r24, 0xFD	; 253
     f36:	80 83       	st	Z, r24
			FAN_OFF;
     f38:	80 81       	ld	r24, Z
     f3a:	8b 7f       	andi	r24, 0xFB	; 251
     f3c:	80 83       	st	Z, r24
			VALVE_ON;
     f3e:	80 81       	ld	r24, Z
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	80 83       	st	Z, r24
			
			ULTRA_OFF;
     f44:	80 81       	ld	r24, Z
     f46:	8f 7e       	andi	r24, 0xEF	; 239
     f48:	80 83       	st	Z, r24
			
			
			
		break;
     f4a:	08 95       	ret
		
		case STATE_FILLING:
			setMotorSpeed(0);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	a3 de       	rcall	.-698    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_OFF;
     f50:	e2 e6       	ldi	r30, 0x62	; 98
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	80 83       	st	Z, r24
			PUMP_ON;
     f5a:	80 81       	ld	r24, Z
     f5c:	82 60       	ori	r24, 0x02	; 2
     f5e:	80 83       	st	Z, r24
			FAN_OFF;
     f60:	80 81       	ld	r24, Z
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	80 83       	st	Z, r24
			VALVE_OFF;
     f66:	80 81       	ld	r24, Z
     f68:	87 7f       	andi	r24, 0xF7	; 247
     f6a:	80 83       	st	Z, r24
			ULTRA_OFF;
     f6c:	80 81       	ld	r24, Z
     f6e:	8f 7e       	andi	r24, 0xEF	; 239
     f70:	80 83       	st	Z, r24
		break;
     f72:	08 95       	ret
		
		case STATE_WASHING:
			
			setMotorSpeed(rotatioSpeedPercentage);
     f74:	80 91 0d 01 	lds	r24, 0x010D
     f78:	8e de       	rcall	.-740    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_ON;
     f7a:	e2 e6       	ldi	r30, 0x62	; 98
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	80 83       	st	Z, r24
			PUMP_OFF;
     f84:	80 81       	ld	r24, Z
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	80 83       	st	Z, r24
			FAN_OFF;
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	80 83       	st	Z, r24
			VALVE_OFF;
     f90:	80 81       	ld	r24, Z
     f92:	87 7f       	andi	r24, 0xF7	; 247
     f94:	80 83       	st	Z, r24
			ULTRA_ON;
     f96:	80 81       	ld	r24, Z
     f98:	80 61       	ori	r24, 0x10	; 16
     f9a:	80 83       	st	Z, r24
		break;
     f9c:	08 95       	ret
		
		case STATE_UNFILLING:
			setMotorSpeed(0);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	7a de       	rcall	.-780    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_OFF;
     fa2:	e2 e6       	ldi	r30, 0x62	; 98
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8e 7f       	andi	r24, 0xFE	; 254
     faa:	80 83       	st	Z, r24
			PUMP_OFF;
     fac:	80 81       	ld	r24, Z
     fae:	8d 7f       	andi	r24, 0xFD	; 253
     fb0:	80 83       	st	Z, r24
			FAN_OFF;
     fb2:	80 81       	ld	r24, Z
     fb4:	8b 7f       	andi	r24, 0xFB	; 251
     fb6:	80 83       	st	Z, r24
			VALVE_ON;
     fb8:	80 81       	ld	r24, Z
     fba:	88 60       	ori	r24, 0x08	; 8
     fbc:	80 83       	st	Z, r24
			ULTRA_OFF;
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7e       	andi	r24, 0xEF	; 239
     fc2:	80 83       	st	Z, r24
		break;
     fc4:	08 95       	ret
		
		case STATE_DRYING:
			setMotorSpeed(rotatioSpeedPercentage);
     fc6:	80 91 0d 01 	lds	r24, 0x010D
     fca:	65 de       	rcall	.-822    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_ON;
     fcc:	e2 e6       	ldi	r30, 0x62	; 98
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	81 60       	ori	r24, 0x01	; 1
     fd4:	80 83       	st	Z, r24
			PUMP_OFF;
     fd6:	80 81       	ld	r24, Z
     fd8:	8d 7f       	andi	r24, 0xFD	; 253
     fda:	80 83       	st	Z, r24
			FAN_ON;
     fdc:	80 81       	ld	r24, Z
     fde:	84 60       	ori	r24, 0x04	; 4
     fe0:	80 83       	st	Z, r24
			VALVE_OFF;
     fe2:	80 81       	ld	r24, Z
     fe4:	87 7f       	andi	r24, 0xF7	; 247
     fe6:	80 83       	st	Z, r24
			ULTRA_OFF;
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	80 83       	st	Z, r24
		break;
     fee:	08 95       	ret
		
		case STATE_EMPTY:
			setMotorSpeed(0);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	51 de       	rcall	.-862    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_ON;
     ff4:	e2 e6       	ldi	r30, 0x62	; 98
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	80 83       	st	Z, r24
			PUMP_OFF;
     ffe:	80 81       	ld	r24, Z
    1000:	8d 7f       	andi	r24, 0xFD	; 253
    1002:	80 83       	st	Z, r24
			FAN_ON;
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	80 83       	st	Z, r24
			VALVE_ON;
    100a:	80 81       	ld	r24, Z
    100c:	88 60       	ori	r24, 0x08	; 8
    100e:	80 83       	st	Z, r24
			ULTRA_OFF;
    1010:	80 81       	ld	r24, Z
    1012:	8f 7e       	andi	r24, 0xEF	; 239
    1014:	80 83       	st	Z, r24
		break;
    1016:	08 95       	ret
		
		case STATE_FINISHED:
			setMotorSpeed(0);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	3d de       	rcall	.-902    	; 0xc96 <setMotorSpeed>
			// DISABLE ALL
			MOTOR_ON;
    101c:	e2 e6       	ldi	r30, 0x62	; 98
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	81 60       	ori	r24, 0x01	; 1
    1024:	80 83       	st	Z, r24
			PUMP_OFF;
    1026:	80 81       	ld	r24, Z
    1028:	8d 7f       	andi	r24, 0xFD	; 253
    102a:	80 83       	st	Z, r24
			FAN_ON;
    102c:	80 81       	ld	r24, Z
    102e:	84 60       	ori	r24, 0x04	; 4
    1030:	80 83       	st	Z, r24
			VALVE_OFF;
    1032:	80 81       	ld	r24, Z
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	80 83       	st	Z, r24
			ULTRA_OFF;
    1038:	80 81       	ld	r24, Z
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	80 83       	st	Z, r24
    103e:	08 95       	ret

00001040 <schedulerInit>:
/************************************************************************/
/* @Scheduler Init                                                                     */
/************************************************************************/
void schedulerInit(void){
	
	TCCR0 |= TIMER0_SCHED_PRESC;
    1040:	83 b7       	in	r24, 0x33	; 51
    1042:	85 60       	ori	r24, 0x05	; 5
    1044:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_WAVEFORM_MODE_CTC;
    1046:	83 b7       	in	r24, 0x33	; 51
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	83 bf       	out	0x33, r24	; 51
	OCR0  = TIMER0_SCHED_RELOAD; // timer count reload
    104c:	8d e7       	ldi	r24, 0x7D	; 125
    104e:	81 bf       	out	0x31, r24	; 49
	TIMSK |= (1<< OCIE0); // Enable timer compare interrupt
    1050:	87 b7       	in	r24, 0x37	; 55
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	87 bf       	out	0x37, r24	; 55
    1056:	08 95       	ret

00001058 <configGPIO>:
/************************************************************************/
void configGPIO(void){
	
	
	
	DDRE =0xFF; // all outputs
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	82 b9       	out	0x02, r24	; 2
	PORTF=0x00;
    105c:	10 92 62 00 	sts	0x0062, r1
	
	DDRA = 0xF0; // low nible input
    1060:	80 ef       	ldi	r24, 0xF0	; 240
    1062:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F; // enable pullpups
    1064:	8f e0       	ldi	r24, 0x0F	; 15
    1066:	8b bb       	out	0x1b, r24	; 27
	
	DDRB = 0xD0; // low nible input
    1068:	80 ed       	ldi	r24, 0xD0	; 208
    106a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x1F; // enable pullpups
    106c:	8f e1       	ldi	r24, 0x1F	; 31
    106e:	88 bb       	out	0x18, r24	; 24
    1070:	08 95       	ret

00001072 <readButtons>:
/************************************************************************/
/* @read the buttons and complement and clean                                                                     */
/************************************************************************/
uint8_t readButtons(void){

	return (~PINB) &0x00011111; // read the low nibble
    1072:	86 b3       	in	r24, 0x16	; 22
    1074:	80 95       	com	r24
}
    1076:	81 71       	andi	r24, 0x11	; 17
    1078:	08 95       	ret

0000107a <decodeButton>:

/************************************************************************/
/* @decode Button                                                                     */
/************************************************************************/
uint8_t decodeButton(uint8_t button){
	button &=0x1F; // ensure
    107a:	8f 71       	andi	r24, 0x1F	; 31
	switch (button){
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	a9 f0       	breq	.+42     	; 0x10aa <decodeButton+0x30>
    1080:	28 f4       	brcc	.+10     	; 0x108c <decodeButton+0x12>
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	51 f0       	breq	.+20     	; 0x109a <decodeButton+0x20>
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	a1 f0       	breq	.+40     	; 0x10b2 <decodeButton+0x38>
    108a:	11 c0       	rjmp	.+34     	; 0x10ae <decodeButton+0x34>
    108c:	88 30       	cpi	r24, 0x08	; 8
    108e:	49 f0       	breq	.+18     	; 0x10a2 <decodeButton+0x28>
    1090:	80 31       	cpi	r24, 0x10	; 16
    1092:	49 f0       	breq	.+18     	; 0x10a6 <decodeButton+0x2c>
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	59 f4       	brne	.+22     	; 0x10ae <decodeButton+0x34>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <decodeButton+0x24>
		
		case 1: return START_BUTTON;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	08 95       	ret
		break;
		
		case 2: return ESC_BUTTON;
		break;
		
		case 4: return ENTER_BUTTON;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	08 95       	ret
		break;
		
		case 8: return UP_BUTTON;
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	08 95       	ret
		break;
		
		case 16: return DOWN_BUTTON;
    10a6:	85 e0       	ldi	r24, 0x05	; 5
    10a8:	08 95       	ret
		break;
		
		case 3: return PRG_BUTTON; // entering program
    10aa:	86 e0       	ldi	r24, 0x06	; 6
    10ac:	08 95       	ret
		break;
		
		default: return 0;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
	switch (button){
		
		case 1: return START_BUTTON;
		break;
		
		case 2: return ESC_BUTTON;
    10b2:	83 e0       	ldi	r24, 0x03	; 3
		break;
		
		default: return 0;
		break;
	}
}
    10b4:	08 95       	ret

000010b6 <debounceKey>:
/************************************************************************/
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
    10b6:	98 2f       	mov	r25, r24
	uint8_t key =0; // by default
	static uint8_t codeOld;
	static uint8_t keyCount;
	
	// ALREADY SOMETHIN PRESSED
	if(keyCount != 0){
    10b8:	80 91 a9 02 	lds	r24, 0x02A9
    10bc:	88 23       	and	r24, r24
    10be:	69 f0       	breq	.+26     	; 0x10da <debounceKey+0x24>
		
		// IF SAME KEY and inside debounce times save
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
    10c0:	20 91 a8 02 	lds	r18, 0x02A8
    10c4:	92 13       	cpse	r25, r18
    10c6:	1b c0       	rjmp	.+54     	; 0x10fe <debounceKey+0x48>
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	d8 f4       	brcc	.+54     	; 0x1102 <__stack+0x3>
			codeOld =codeNew;
			keyCount++;
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	80 93 a9 02 	sts	0x02A9, r24
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	c1 f0       	breq	.+48     	; 0x1106 <__stack+0x7>
		
	}

	
	// INITIAL CONDITION
	if (keyCount == 0){
    10d6:	81 11       	cpse	r24, r1
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <debounceKey+0x32>
		codeOld = codeNew;
    10da:	90 93 a8 02 	sts	0x02A8, r25
		keyCount++;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 a9 02 	sts	0x02A9, r24
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <debounceKey+0x34>
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
    10e8:	80 e0       	ldi	r24, 0x00	; 0
		codeOld = codeNew;
		keyCount++;
	}
	
	// if pressed key different reset (user must release the key for new run)
	if(codeNew != codeOld){
    10ea:	20 91 a8 02 	lds	r18, 0x02A8
    10ee:	92 17       	cp	r25, r18
    10f0:	61 f0       	breq	.+24     	; 0x110a <__stack+0xb>
		codeOld =codeNew;
    10f2:	90 93 a8 02 	sts	0x02A8, r25
		keyCount =1;
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	90 93 a9 02 	sts	0x02A9, r25
    10fc:	08 95       	ret
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	f4 cf       	rjmp	.-24     	; 0x10ea <debounceKey+0x34>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	f2 cf       	rjmp	.-28     	; 0x10ea <debounceKey+0x34>
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
			codeOld =codeNew;
			keyCount++;
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
				key = codeNew; // ONLY HERE key is changed;
    1106:	89 2f       	mov	r24, r25
    1108:	f0 cf       	rjmp	.-32     	; 0x10ea <debounceKey+0x34>
	if(codeNew != codeOld){
		codeOld =codeNew;
		keyCount =1;
	}
	return key;
}
    110a:	08 95       	ret

0000110c <readSensors>:
/************************************************************************/
/* @ read sensors and activate sensor flags vars                                                                     */
/************************************************************************/
int readSensors(void){

	diskInSensor = bit_read(SENSORS_PORT,PIN_SENSOR_START);
    110c:	89 b3       	in	r24, 0x19	; 25
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	80 93 f5 02 	sts	0x02F5, r24
	filledTankSensor = bit_read(SENSORS_PORT,PIN_SENSOR_TANK_FILLED);
    1114:	89 b3       	in	r24, 0x19	; 25
    1116:	82 70       	andi	r24, 0x02	; 2
    1118:	80 93 f2 02 	sts	0x02F2, r24
	emptyReservoirSensor = bit_read(SENSORS_PORT,PIN_SENSOR_RESERVOIR_EMPTY);
    111c:	89 b3       	in	r24, 0x19	; 25
    111e:	84 70       	andi	r24, 0x04	; 4
    1120:	80 93 fa 02 	sts	0x02FA, r24
	emptyTankSensor = bit_read(SENSORS_PORT,PIN_SENSOR_TANK_EMPTY);
    1124:	89 b3       	in	r24, 0x19	; 25
    1126:	88 70       	andi	r24, 0x08	; 8
    1128:	80 93 f9 02 	sts	0x02F9, r24
	
	return (1);
}
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	08 95       	ret

00001132 <readAnalogs>:


/************************************************************************/
/* @ Read All analogs channels                                                                     */
/************************************************************************/
void readAnalogs(void){
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
	
	washingTime = ADC_readAndWAIT(0);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	66 d9       	rcall	.-3380   	; 0x40e <ADC_readAndWAIT>
    1142:	90 93 11 01 	sts	0x0111, r25
    1146:	80 93 10 01 	sts	0x0110, r24
	washingTime = (uint16_t) washingMaxTime * ((double)washingTime/(double)1024);
    114a:	60 91 18 01 	lds	r22, 0x0118
    114e:	70 91 19 01 	lds	r23, 0x0119
    1152:	c0 91 10 01 	lds	r28, 0x0110
    1156:	d0 91 11 01 	lds	r29, 0x0111
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	c0 d0       	rcall	.+384    	; 0x12e0 <__floatunsisf>
    1160:	6b 01       	movw	r12, r22
    1162:	7c 01       	movw	r14, r24
    1164:	be 01       	movw	r22, r28
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	ba d0       	rcall	.+372    	; 0x12e0 <__floatunsisf>
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5a e3       	ldi	r21, 0x3A	; 58
    1174:	1b d1       	rcall	.+566    	; 0x13ac <__mulsf3>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c7 01       	movw	r24, r14
    117c:	b6 01       	movw	r22, r12
    117e:	16 d1       	rcall	.+556    	; 0x13ac <__mulsf3>
    1180:	83 d0       	rcall	.+262    	; 0x1288 <__fixunssfsi>
    1182:	70 93 11 01 	sts	0x0111, r23
    1186:	60 93 10 01 	sts	0x0110, r22
	dryingTime = ADC_readAndWAIT(1);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	40 d9       	rcall	.-3456   	; 0x40e <ADC_readAndWAIT>
    118e:	90 93 0f 01 	sts	0x010F, r25
    1192:	80 93 0e 01 	sts	0x010E, r24
	dryingTime = (uint16_t) drywingMaxTime * ((double)dryingTime/(double)1024);
    1196:	60 91 14 01 	lds	r22, 0x0114
    119a:	70 91 15 01 	lds	r23, 0x0115
    119e:	c0 91 0e 01 	lds	r28, 0x010E
    11a2:	d0 91 0f 01 	lds	r29, 0x010F
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9a d0       	rcall	.+308    	; 0x12e0 <__floatunsisf>
    11ac:	6b 01       	movw	r12, r22
    11ae:	7c 01       	movw	r14, r24
    11b0:	be 01       	movw	r22, r28
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	94 d0       	rcall	.+296    	; 0x12e0 <__floatunsisf>
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e8       	ldi	r20, 0x80	; 128
    11be:	5a e3       	ldi	r21, 0x3A	; 58
    11c0:	f5 d0       	rcall	.+490    	; 0x13ac <__mulsf3>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	c7 01       	movw	r24, r14
    11c8:	b6 01       	movw	r22, r12
    11ca:	f0 d0       	rcall	.+480    	; 0x13ac <__mulsf3>
    11cc:	5d d0       	rcall	.+186    	; 0x1288 <__fixunssfsi>
    11ce:	70 93 0f 01 	sts	0x010F, r23
    11d2:	60 93 0e 01 	sts	0x010E, r22
	// need conversiton
	//rotatioSpeedPercentage = ADC_readAndWAIT(3);
	
}
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	08 95       	ret

000011e4 <main>:
*/


int main(void){
	
	USART1_config(USART1_MY_UBBRN,USART_DATA_FORMAT_8BITS|USART_STOP_BITS_1,USART_TRANSMIT_ENABLE|USART_RECEIVE_ENABLE| USART_INTERRUPT_ENABLE);
    11e4:	48 e9       	ldi	r20, 0x98	; 152
    11e6:	66 e0       	ldi	r22, 0x06	; 6
    11e8:	80 e1       	ldi	r24, 0x10	; 16
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	30 dc       	rcall	.-1952   	; 0xa4e <USART1_config>
	//Config IO Ports
	configGPIO();
    11ee:	34 df       	rcall	.-408    	; 0x1058 <configGPIO>
	//Init Scheduler
	schedulerInit();
    11f0:	27 df       	rcall	.-434    	; 0x1040 <schedulerInit>
	configPWM();
    11f2:	44 dd       	rcall	.-1400   	; 0xc7c <configPWM>
	setMotorSpeed(0);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	4f dd       	rcall	.-1378   	; 0xc96 <setMotorSpeed>
	//Init ADC
	ADC_init(ADC_ENABLE,ADC_REF_VCC,ADC_MAX_FREQ); //CHECK PARAMS TO FILL IN
    11f8:	48 ec       	ldi	r20, 0xC8	; 200
    11fa:	60 e4       	ldi	r22, 0x40	; 64
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	f8 d8       	rcall	.-3600   	; 0x3f0 <ADC_init>
	
	//Init LCD
	LCD_init();
    1200:	d1 db       	rcall	.-2142   	; 0x9a4 <LCD_init>
	LCD_clr();
    1202:	80 db       	rcall	.-2304   	; 0x904 <LCD_clr>
	//LCD_sendString(&temp);
	
	showLcdSplash(); // show splash
    1204:	0e 94 a8 00 	call	0x150	; 0x150 <showLcdSplash>
	
	paramLoadFromEeprom(); // load parameters
    1208:	bf dc       	rcall	.-1666   	; 0xb88 <paramLoadFromEeprom>
	
	//enable interrupts
	sei();
    120a:	78 94       	sei
	
	USART1_sendStr("HELLO\n\r");
    120c:	8e e9       	ldi	r24, 0x9E	; 158
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	2f dc       	rcall	.-1954   	; 0xa70 <USART1_sendStr>
	
	uint8_t codeSaved=0;
    1212:	c0 e0       	ldi	r28, 0x00	; 0
    while(1){
		
        //TODO:: Please write your application code 
		
		// READ ANALOGS
		if(flagTaskReadAnalog){
    1214:	90 91 ad 02 	lds	r25, 0x02AD
    1218:	99 23       	and	r25, r25
    121a:	19 f0       	breq	.+6      	; 0x1222 <main+0x3e>
			readAnalogs();
    121c:	8a df       	rcall	.-236    	; 0x1132 <readAnalogs>
			
			flagTaskReadAnalog=0;	
    121e:	10 92 ad 02 	sts	0x02AD, r1
		}
		
		// READ BUTTONS
		if(flagTaskReadButtons){
    1222:	90 91 ae 02 	lds	r25, 0x02AE
    1226:	99 23       	and	r25, r25
    1228:	49 f0       	breq	.+18     	; 0x123c <main+0x58>
			readSensors();
    122a:	70 df       	rcall	.-288    	; 0x110c <readSensors>
			portVal = readButtons();
    122c:	22 df       	rcall	.-444    	; 0x1072 <readButtons>
			code = decodeButton(portVal);
    122e:	25 df       	rcall	.-438    	; 0x107a <decodeButton>
			code = debounceKey(code);
    1230:	42 df       	rcall	.-380    	; 0x10b6 <debounceKey>
			
			if(code !=0x00){
    1232:	81 11       	cpse	r24, r1
				codeSaved = code;
    1234:	c8 2f       	mov	r28, r24
				
			}
			
			stateMachineProgram(code);// lcd stuff
    1236:	03 de       	rcall	.-1018   	; 0xe3e <stateMachineProgram>
			flagTaskReadButtons=0;
    1238:	10 92 ae 02 	sts	0x02AE, r1
		}
		
		// MACHINE STATE
		if(flagTaskStateUpdate){
    123c:	90 91 ac 02 	lds	r25, 0x02AC
    1240:	99 23       	and	r25, r25
    1242:	29 f0       	breq	.+10     	; 0x124e <main+0x6a>
			
			
			stateMachine(codeSaved);
    1244:	8c 2f       	mov	r24, r28
    1246:	3f dd       	rcall	.-1410   	; 0xcc6 <stateMachine>
			codeSaved =0x00;
			
			flagTaskStateUpdate=0;
    1248:	10 92 ac 02 	sts	0x02AC, r1
		// MACHINE STATE
		if(flagTaskStateUpdate){
			
			
			stateMachine(codeSaved);
			codeSaved =0x00;
    124c:	c0 e0       	ldi	r28, 0x00	; 0
			
			flagTaskStateUpdate=0;
		}
		
		// SET OUTPUS
		if(flagTaskUpdateOutputs){
    124e:	90 91 aa 02 	lds	r25, 0x02AA
    1252:	99 23       	and	r25, r25
    1254:	29 f0       	breq	.+10     	; 0x1260 <main+0x7c>
			
			decodeOutputs(stateMode);
    1256:	80 91 f8 02 	lds	r24, 0x02F8
    125a:	59 de       	rcall	.-846    	; 0xf0e <decodeOutputs>
			flagTaskUpdateOutputs=0;
    125c:	10 92 aa 02 	sts	0x02AA, r1
		}
		
		// SET LCD
		if(flagTaskLcd){
    1260:	90 91 ab 02 	lds	r25, 0x02AB
    1264:	99 23       	and	r25, r25
    1266:	31 f0       	breq	.+12     	; 0x1274 <main+0x90>
			
			showLcdMessagesVars(stateMode);
    1268:	80 91 f8 02 	lds	r24, 0x02F8
    126c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <showLcdMessagesVars>
			flagTaskLcd=0;
    1270:	10 92 ab 02 	sts	0x02AB, r1
		}
		
		
		// Beep the buzzer
		if(flagBeep){
    1274:	90 91 f4 02 	lds	r25, 0x02F4
		}
		
		
		
		// Save Parameters
		if(flagSaveParams){
    1278:	90 91 fd 02 	lds	r25, 0x02FD
    127c:	99 23       	and	r25, r25
    127e:	51 f2       	breq	.-108    	; 0x1214 <main+0x30>
			paramSavetoEeprom();
    1280:	c2 dc       	rcall	.-1660   	; 0xc06 <paramSavetoEeprom>
			flagSaveParams=0;
    1282:	10 92 fd 02 	sts	0x02FD, r1
    1286:	c6 cf       	rjmp	.-116    	; 0x1214 <main+0x30>

00001288 <__fixunssfsi>:
    1288:	70 d0       	rcall	.+224    	; 0x136a <__fp_splitA>
    128a:	88 f0       	brcs	.+34     	; 0x12ae <__fixunssfsi+0x26>
    128c:	9f 57       	subi	r25, 0x7F	; 127
    128e:	90 f0       	brcs	.+36     	; 0x12b4 <__fixunssfsi+0x2c>
    1290:	b9 2f       	mov	r27, r25
    1292:	99 27       	eor	r25, r25
    1294:	b7 51       	subi	r27, 0x17	; 23
    1296:	a0 f0       	brcs	.+40     	; 0x12c0 <__fixunssfsi+0x38>
    1298:	d1 f0       	breq	.+52     	; 0x12ce <__fixunssfsi+0x46>
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	1a f0       	brmi	.+6      	; 0x12aa <__fixunssfsi+0x22>
    12a4:	ba 95       	dec	r27
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__fixunssfsi+0x12>
    12a8:	12 c0       	rjmp	.+36     	; 0x12ce <__fixunssfsi+0x46>
    12aa:	b1 30       	cpi	r27, 0x01	; 1
    12ac:	81 f0       	breq	.+32     	; 0x12ce <__fixunssfsi+0x46>
    12ae:	77 d0       	rcall	.+238    	; 0x139e <__fp_zero>
    12b0:	b1 e0       	ldi	r27, 0x01	; 1
    12b2:	08 95       	ret
    12b4:	74 c0       	rjmp	.+232    	; 0x139e <__fp_zero>
    12b6:	67 2f       	mov	r22, r23
    12b8:	78 2f       	mov	r23, r24
    12ba:	88 27       	eor	r24, r24
    12bc:	b8 5f       	subi	r27, 0xF8	; 248
    12be:	39 f0       	breq	.+14     	; 0x12ce <__fixunssfsi+0x46>
    12c0:	b9 3f       	cpi	r27, 0xF9	; 249
    12c2:	cc f3       	brlt	.-14     	; 0x12b6 <__fixunssfsi+0x2e>
    12c4:	86 95       	lsr	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b3 95       	inc	r27
    12cc:	d9 f7       	brne	.-10     	; 0x12c4 <__fixunssfsi+0x3c>
    12ce:	3e f4       	brtc	.+14     	; 0x12de <__fixunssfsi+0x56>
    12d0:	90 95       	com	r25
    12d2:	80 95       	com	r24
    12d4:	70 95       	com	r23
    12d6:	61 95       	neg	r22
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	08 95       	ret

000012e0 <__floatunsisf>:
    12e0:	e8 94       	clt
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <__floatsisf+0x12>

000012e4 <__floatsisf>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	3e f4       	brtc	.+14     	; 0x12f6 <__floatsisf+0x12>
    12e8:	90 95       	com	r25
    12ea:	80 95       	com	r24
    12ec:	70 95       	com	r23
    12ee:	61 95       	neg	r22
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	99 23       	and	r25, r25
    12f8:	a9 f0       	breq	.+42     	; 0x1324 <__floatsisf+0x40>
    12fa:	f9 2f       	mov	r31, r25
    12fc:	96 e9       	ldi	r25, 0x96	; 150
    12fe:	bb 27       	eor	r27, r27
    1300:	93 95       	inc	r25
    1302:	f6 95       	lsr	r31
    1304:	87 95       	ror	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f1 11       	cpse	r31, r1
    130e:	f8 cf       	rjmp	.-16     	; 0x1300 <__floatsisf+0x1c>
    1310:	fa f4       	brpl	.+62     	; 0x1350 <__floatsisf+0x6c>
    1312:	bb 0f       	add	r27, r27
    1314:	11 f4       	brne	.+4      	; 0x131a <__floatsisf+0x36>
    1316:	60 ff       	sbrs	r22, 0
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <__floatsisf+0x6c>
    131a:	6f 5f       	subi	r22, 0xFF	; 255
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	16 c0       	rjmp	.+44     	; 0x1350 <__floatsisf+0x6c>
    1324:	88 23       	and	r24, r24
    1326:	11 f0       	breq	.+4      	; 0x132c <__floatsisf+0x48>
    1328:	96 e9       	ldi	r25, 0x96	; 150
    132a:	11 c0       	rjmp	.+34     	; 0x134e <__floatsisf+0x6a>
    132c:	77 23       	and	r23, r23
    132e:	21 f0       	breq	.+8      	; 0x1338 <__floatsisf+0x54>
    1330:	9e e8       	ldi	r25, 0x8E	; 142
    1332:	87 2f       	mov	r24, r23
    1334:	76 2f       	mov	r23, r22
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <__floatsisf+0x5e>
    1338:	66 23       	and	r22, r22
    133a:	71 f0       	breq	.+28     	; 0x1358 <__floatsisf+0x74>
    133c:	96 e8       	ldi	r25, 0x86	; 134
    133e:	86 2f       	mov	r24, r22
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	2a f0       	brmi	.+10     	; 0x1350 <__floatsisf+0x6c>
    1346:	9a 95       	dec	r25
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	da f7       	brpl	.-10     	; 0x1346 <__floatsisf+0x62>
    1350:	88 0f       	add	r24, r24
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	97 f9       	bld	r25, 7
    1358:	08 95       	ret

0000135a <__fp_split3>:
    135a:	57 fd       	sbrc	r21, 7
    135c:	90 58       	subi	r25, 0x80	; 128
    135e:	44 0f       	add	r20, r20
    1360:	55 1f       	adc	r21, r21
    1362:	59 f0       	breq	.+22     	; 0x137a <__fp_splitA+0x10>
    1364:	5f 3f       	cpi	r21, 0xFF	; 255
    1366:	71 f0       	breq	.+28     	; 0x1384 <__fp_splitA+0x1a>
    1368:	47 95       	ror	r20

0000136a <__fp_splitA>:
    136a:	88 0f       	add	r24, r24
    136c:	97 fb       	bst	r25, 7
    136e:	99 1f       	adc	r25, r25
    1370:	61 f0       	breq	.+24     	; 0x138a <__fp_splitA+0x20>
    1372:	9f 3f       	cpi	r25, 0xFF	; 255
    1374:	79 f0       	breq	.+30     	; 0x1394 <__fp_splitA+0x2a>
    1376:	87 95       	ror	r24
    1378:	08 95       	ret
    137a:	12 16       	cp	r1, r18
    137c:	13 06       	cpc	r1, r19
    137e:	14 06       	cpc	r1, r20
    1380:	55 1f       	adc	r21, r21
    1382:	f2 cf       	rjmp	.-28     	; 0x1368 <__fp_split3+0xe>
    1384:	46 95       	lsr	r20
    1386:	f1 df       	rcall	.-30     	; 0x136a <__fp_splitA>
    1388:	08 c0       	rjmp	.+16     	; 0x139a <__fp_splitA+0x30>
    138a:	16 16       	cp	r1, r22
    138c:	17 06       	cpc	r1, r23
    138e:	18 06       	cpc	r1, r24
    1390:	99 1f       	adc	r25, r25
    1392:	f1 cf       	rjmp	.-30     	; 0x1376 <__fp_splitA+0xc>
    1394:	86 95       	lsr	r24
    1396:	71 05       	cpc	r23, r1
    1398:	61 05       	cpc	r22, r1
    139a:	08 94       	sec
    139c:	08 95       	ret

0000139e <__fp_zero>:
    139e:	e8 94       	clt

000013a0 <__fp_szero>:
    13a0:	bb 27       	eor	r27, r27
    13a2:	66 27       	eor	r22, r22
    13a4:	77 27       	eor	r23, r23
    13a6:	cb 01       	movw	r24, r22
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <__mulsf3>:
    13ac:	0b d0       	rcall	.+22     	; 0x13c4 <__mulsf3x>
    13ae:	78 c0       	rjmp	.+240    	; 0x14a0 <__fp_round>
    13b0:	69 d0       	rcall	.+210    	; 0x1484 <__fp_pscA>
    13b2:	28 f0       	brcs	.+10     	; 0x13be <__mulsf3+0x12>
    13b4:	6e d0       	rcall	.+220    	; 0x1492 <__fp_pscB>
    13b6:	18 f0       	brcs	.+6      	; 0x13be <__mulsf3+0x12>
    13b8:	95 23       	and	r25, r21
    13ba:	09 f0       	breq	.+2      	; 0x13be <__mulsf3+0x12>
    13bc:	5a c0       	rjmp	.+180    	; 0x1472 <__fp_inf>
    13be:	5f c0       	rjmp	.+190    	; 0x147e <__fp_nan>
    13c0:	11 24       	eor	r1, r1
    13c2:	ee cf       	rjmp	.-36     	; 0x13a0 <__fp_szero>

000013c4 <__mulsf3x>:
    13c4:	ca df       	rcall	.-108    	; 0x135a <__fp_split3>
    13c6:	a0 f3       	brcs	.-24     	; 0x13b0 <__mulsf3+0x4>

000013c8 <__mulsf3_pse>:
    13c8:	95 9f       	mul	r25, r21
    13ca:	d1 f3       	breq	.-12     	; 0x13c0 <__mulsf3+0x14>
    13cc:	95 0f       	add	r25, r21
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	55 1f       	adc	r21, r21
    13d2:	62 9f       	mul	r22, r18
    13d4:	f0 01       	movw	r30, r0
    13d6:	72 9f       	mul	r23, r18
    13d8:	bb 27       	eor	r27, r27
    13da:	f0 0d       	add	r31, r0
    13dc:	b1 1d       	adc	r27, r1
    13de:	63 9f       	mul	r22, r19
    13e0:	aa 27       	eor	r26, r26
    13e2:	f0 0d       	add	r31, r0
    13e4:	b1 1d       	adc	r27, r1
    13e6:	aa 1f       	adc	r26, r26
    13e8:	64 9f       	mul	r22, r20
    13ea:	66 27       	eor	r22, r22
    13ec:	b0 0d       	add	r27, r0
    13ee:	a1 1d       	adc	r26, r1
    13f0:	66 1f       	adc	r22, r22
    13f2:	82 9f       	mul	r24, r18
    13f4:	22 27       	eor	r18, r18
    13f6:	b0 0d       	add	r27, r0
    13f8:	a1 1d       	adc	r26, r1
    13fa:	62 1f       	adc	r22, r18
    13fc:	73 9f       	mul	r23, r19
    13fe:	b0 0d       	add	r27, r0
    1400:	a1 1d       	adc	r26, r1
    1402:	62 1f       	adc	r22, r18
    1404:	83 9f       	mul	r24, r19
    1406:	a0 0d       	add	r26, r0
    1408:	61 1d       	adc	r22, r1
    140a:	22 1f       	adc	r18, r18
    140c:	74 9f       	mul	r23, r20
    140e:	33 27       	eor	r19, r19
    1410:	a0 0d       	add	r26, r0
    1412:	61 1d       	adc	r22, r1
    1414:	23 1f       	adc	r18, r19
    1416:	84 9f       	mul	r24, r20
    1418:	60 0d       	add	r22, r0
    141a:	21 1d       	adc	r18, r1
    141c:	82 2f       	mov	r24, r18
    141e:	76 2f       	mov	r23, r22
    1420:	6a 2f       	mov	r22, r26
    1422:	11 24       	eor	r1, r1
    1424:	9f 57       	subi	r25, 0x7F	; 127
    1426:	50 40       	sbci	r21, 0x00	; 0
    1428:	8a f0       	brmi	.+34     	; 0x144c <__mulsf3_pse+0x84>
    142a:	e1 f0       	breq	.+56     	; 0x1464 <__mulsf3_pse+0x9c>
    142c:	88 23       	and	r24, r24
    142e:	4a f0       	brmi	.+18     	; 0x1442 <__mulsf3_pse+0x7a>
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	bb 1f       	adc	r27, r27
    1436:	66 1f       	adc	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	a9 f7       	brne	.-22     	; 0x142c <__mulsf3_pse+0x64>
    1442:	9e 3f       	cpi	r25, 0xFE	; 254
    1444:	51 05       	cpc	r21, r1
    1446:	70 f0       	brcs	.+28     	; 0x1464 <__mulsf3_pse+0x9c>
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <__fp_inf>
    144a:	aa cf       	rjmp	.-172    	; 0x13a0 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	ec f3       	brlt	.-6      	; 0x144a <__mulsf3_pse+0x82>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	dc f3       	brlt	.-10     	; 0x144a <__mulsf3_pse+0x82>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	e7 95       	ror	r30
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__mulsf3_pse+0x8c>
    1464:	fe 2b       	or	r31, r30
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__fp_inf>:
    1472:	97 f9       	bld	r25, 7
    1474:	9f 67       	ori	r25, 0x7F	; 127
    1476:	80 e8       	ldi	r24, 0x80	; 128
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	08 95       	ret

0000147e <__fp_nan>:
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	80 ec       	ldi	r24, 0xC0	; 192
    1482:	08 95       	ret

00001484 <__fp_pscA>:
    1484:	00 24       	eor	r0, r0
    1486:	0a 94       	dec	r0
    1488:	16 16       	cp	r1, r22
    148a:	17 06       	cpc	r1, r23
    148c:	18 06       	cpc	r1, r24
    148e:	09 06       	cpc	r0, r25
    1490:	08 95       	ret

00001492 <__fp_pscB>:
    1492:	00 24       	eor	r0, r0
    1494:	0a 94       	dec	r0
    1496:	12 16       	cp	r1, r18
    1498:	13 06       	cpc	r1, r19
    149a:	14 06       	cpc	r1, r20
    149c:	05 06       	cpc	r0, r21
    149e:	08 95       	ret

000014a0 <__fp_round>:
    14a0:	09 2e       	mov	r0, r25
    14a2:	03 94       	inc	r0
    14a4:	00 0c       	add	r0, r0
    14a6:	11 f4       	brne	.+4      	; 0x14ac <__fp_round+0xc>
    14a8:	88 23       	and	r24, r24
    14aa:	52 f0       	brmi	.+20     	; 0x14c0 <__fp_round+0x20>
    14ac:	bb 0f       	add	r27, r27
    14ae:	40 f4       	brcc	.+16     	; 0x14c0 <__fp_round+0x20>
    14b0:	bf 2b       	or	r27, r31
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__fp_round+0x18>
    14b4:	60 ff       	sbrs	r22, 0
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <__fp_round+0x20>
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__udivmodhi4>:
    14c2:	aa 1b       	sub	r26, r26
    14c4:	bb 1b       	sub	r27, r27
    14c6:	51 e1       	ldi	r21, 0x11	; 17
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <__udivmodhi4_ep>

000014ca <__udivmodhi4_loop>:
    14ca:	aa 1f       	adc	r26, r26
    14cc:	bb 1f       	adc	r27, r27
    14ce:	a6 17       	cp	r26, r22
    14d0:	b7 07       	cpc	r27, r23
    14d2:	10 f0       	brcs	.+4      	; 0x14d8 <__udivmodhi4_ep>
    14d4:	a6 1b       	sub	r26, r22
    14d6:	b7 0b       	sbc	r27, r23

000014d8 <__udivmodhi4_ep>:
    14d8:	88 1f       	adc	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	5a 95       	dec	r21
    14de:	a9 f7       	brne	.-22     	; 0x14ca <__udivmodhi4_loop>
    14e0:	80 95       	com	r24
    14e2:	90 95       	com	r25
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	08 95       	ret

000014ea <__udivmodsi4>:
    14ea:	a1 e2       	ldi	r26, 0x21	; 33
    14ec:	1a 2e       	mov	r1, r26
    14ee:	aa 1b       	sub	r26, r26
    14f0:	bb 1b       	sub	r27, r27
    14f2:	fd 01       	movw	r30, r26
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <__udivmodsi4_ep>

000014f6 <__udivmodsi4_loop>:
    14f6:	aa 1f       	adc	r26, r26
    14f8:	bb 1f       	adc	r27, r27
    14fa:	ee 1f       	adc	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	a2 17       	cp	r26, r18
    1500:	b3 07       	cpc	r27, r19
    1502:	e4 07       	cpc	r30, r20
    1504:	f5 07       	cpc	r31, r21
    1506:	20 f0       	brcs	.+8      	; 0x1510 <__udivmodsi4_ep>
    1508:	a2 1b       	sub	r26, r18
    150a:	b3 0b       	sbc	r27, r19
    150c:	e4 0b       	sbc	r30, r20
    150e:	f5 0b       	sbc	r31, r21

00001510 <__udivmodsi4_ep>:
    1510:	66 1f       	adc	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	1a 94       	dec	r1
    151a:	69 f7       	brne	.-38     	; 0x14f6 <__udivmodsi4_loop>
    151c:	60 95       	com	r22
    151e:	70 95       	com	r23
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	9b 01       	movw	r18, r22
    1526:	ac 01       	movw	r20, r24
    1528:	bd 01       	movw	r22, r26
    152a:	cf 01       	movw	r24, r30
    152c:	08 95       	ret

0000152e <__tablejump2__>:
    152e:	ee 0f       	add	r30, r30
    1530:	ff 1f       	adc	r31, r31

00001532 <__tablejump__>:
    1532:	05 90       	lpm	r0, Z+
    1534:	f4 91       	lpm	r31, Z
    1536:	e0 2d       	mov	r30, r0
    1538:	09 94       	ijmp

0000153a <__umulhisi3>:
    153a:	a2 9f       	mul	r26, r18
    153c:	b0 01       	movw	r22, r0
    153e:	b3 9f       	mul	r27, r19
    1540:	c0 01       	movw	r24, r0
    1542:	a3 9f       	mul	r26, r19
    1544:	70 0d       	add	r23, r0
    1546:	81 1d       	adc	r24, r1
    1548:	11 24       	eor	r1, r1
    154a:	91 1d       	adc	r25, r1
    154c:	b2 9f       	mul	r27, r18
    154e:	70 0d       	add	r23, r0
    1550:	81 1d       	adc	r24, r1
    1552:	11 24       	eor	r1, r1
    1554:	91 1d       	adc	r25, r1
    1556:	08 95       	ret

00001558 <sprintf>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	2e 97       	sbiw	r28, 0x0e	; 14
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	0d 89       	ldd	r16, Y+21	; 0x15
    1572:	1e 89       	ldd	r17, Y+22	; 0x16
    1574:	86 e0       	ldi	r24, 0x06	; 6
    1576:	8c 83       	std	Y+4, r24	; 0x04
    1578:	1a 83       	std	Y+2, r17	; 0x02
    157a:	09 83       	std	Y+1, r16	; 0x01
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	9f e7       	ldi	r25, 0x7F	; 127
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	ae 01       	movw	r20, r28
    1586:	47 5e       	subi	r20, 0xE7	; 231
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	6f 89       	ldd	r22, Y+23	; 0x17
    158c:	78 8d       	ldd	r23, Y+24	; 0x18
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	10 d0       	rcall	.+32     	; 0x15b4 <vfprintf>
    1594:	ef 81       	ldd	r30, Y+7	; 0x07
    1596:	f8 85       	ldd	r31, Y+8	; 0x08
    1598:	e0 0f       	add	r30, r16
    159a:	f1 1f       	adc	r31, r17
    159c:	10 82       	st	Z, r1
    159e:	2e 96       	adiw	r28, 0x0e	; 14
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <vfprintf>:
    15b4:	2f 92       	push	r2
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	2c 97       	sbiw	r28, 0x0c	; 12
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	7c 01       	movw	r14, r24
    15ea:	6b 01       	movw	r12, r22
    15ec:	8a 01       	movw	r16, r20
    15ee:	fc 01       	movw	r30, r24
    15f0:	17 82       	std	Z+7, r1	; 0x07
    15f2:	16 82       	std	Z+6, r1	; 0x06
    15f4:	83 81       	ldd	r24, Z+3	; 0x03
    15f6:	81 ff       	sbrs	r24, 1
    15f8:	b0 c1       	rjmp	.+864    	; 0x195a <vfprintf+0x3a6>
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	4c 01       	movw	r8, r24
    1600:	f7 01       	movw	r30, r14
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	f6 01       	movw	r30, r12
    1606:	93 fd       	sbrc	r25, 3
    1608:	85 91       	lpm	r24, Z+
    160a:	93 ff       	sbrs	r25, 3
    160c:	81 91       	ld	r24, Z+
    160e:	6f 01       	movw	r12, r30
    1610:	88 23       	and	r24, r24
    1612:	09 f4       	brne	.+2      	; 0x1616 <vfprintf+0x62>
    1614:	9e c1       	rjmp	.+828    	; 0x1952 <vfprintf+0x39e>
    1616:	85 32       	cpi	r24, 0x25	; 37
    1618:	39 f4       	brne	.+14     	; 0x1628 <vfprintf+0x74>
    161a:	93 fd       	sbrc	r25, 3
    161c:	85 91       	lpm	r24, Z+
    161e:	93 ff       	sbrs	r25, 3
    1620:	81 91       	ld	r24, Z+
    1622:	6f 01       	movw	r12, r30
    1624:	85 32       	cpi	r24, 0x25	; 37
    1626:	21 f4       	brne	.+8      	; 0x1630 <vfprintf+0x7c>
    1628:	b7 01       	movw	r22, r14
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	ed d1       	rcall	.+986    	; 0x1a08 <fputc>
    162e:	e8 cf       	rjmp	.-48     	; 0x1600 <vfprintf+0x4c>
    1630:	51 2c       	mov	r5, r1
    1632:	31 2c       	mov	r3, r1
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	20 32       	cpi	r18, 0x20	; 32
    1638:	a0 f4       	brcc	.+40     	; 0x1662 <vfprintf+0xae>
    163a:	8b 32       	cpi	r24, 0x2B	; 43
    163c:	69 f0       	breq	.+26     	; 0x1658 <vfprintf+0xa4>
    163e:	30 f4       	brcc	.+12     	; 0x164c <vfprintf+0x98>
    1640:	80 32       	cpi	r24, 0x20	; 32
    1642:	59 f0       	breq	.+22     	; 0x165a <vfprintf+0xa6>
    1644:	83 32       	cpi	r24, 0x23	; 35
    1646:	69 f4       	brne	.+26     	; 0x1662 <vfprintf+0xae>
    1648:	20 61       	ori	r18, 0x10	; 16
    164a:	2c c0       	rjmp	.+88     	; 0x16a4 <vfprintf+0xf0>
    164c:	8d 32       	cpi	r24, 0x2D	; 45
    164e:	39 f0       	breq	.+14     	; 0x165e <vfprintf+0xaa>
    1650:	80 33       	cpi	r24, 0x30	; 48
    1652:	39 f4       	brne	.+14     	; 0x1662 <vfprintf+0xae>
    1654:	21 60       	ori	r18, 0x01	; 1
    1656:	26 c0       	rjmp	.+76     	; 0x16a4 <vfprintf+0xf0>
    1658:	22 60       	ori	r18, 0x02	; 2
    165a:	24 60       	ori	r18, 0x04	; 4
    165c:	23 c0       	rjmp	.+70     	; 0x16a4 <vfprintf+0xf0>
    165e:	28 60       	ori	r18, 0x08	; 8
    1660:	21 c0       	rjmp	.+66     	; 0x16a4 <vfprintf+0xf0>
    1662:	27 fd       	sbrc	r18, 7
    1664:	27 c0       	rjmp	.+78     	; 0x16b4 <vfprintf+0x100>
    1666:	30 ed       	ldi	r19, 0xD0	; 208
    1668:	38 0f       	add	r19, r24
    166a:	3a 30       	cpi	r19, 0x0A	; 10
    166c:	78 f4       	brcc	.+30     	; 0x168c <vfprintf+0xd8>
    166e:	26 ff       	sbrs	r18, 6
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0xca>
    1672:	fa e0       	ldi	r31, 0x0A	; 10
    1674:	5f 9e       	mul	r5, r31
    1676:	30 0d       	add	r19, r0
    1678:	11 24       	eor	r1, r1
    167a:	53 2e       	mov	r5, r19
    167c:	13 c0       	rjmp	.+38     	; 0x16a4 <vfprintf+0xf0>
    167e:	8a e0       	ldi	r24, 0x0A	; 10
    1680:	38 9e       	mul	r3, r24
    1682:	30 0d       	add	r19, r0
    1684:	11 24       	eor	r1, r1
    1686:	33 2e       	mov	r3, r19
    1688:	20 62       	ori	r18, 0x20	; 32
    168a:	0c c0       	rjmp	.+24     	; 0x16a4 <vfprintf+0xf0>
    168c:	8e 32       	cpi	r24, 0x2E	; 46
    168e:	21 f4       	brne	.+8      	; 0x1698 <vfprintf+0xe4>
    1690:	26 fd       	sbrc	r18, 6
    1692:	5f c1       	rjmp	.+702    	; 0x1952 <vfprintf+0x39e>
    1694:	20 64       	ori	r18, 0x40	; 64
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <vfprintf+0xf0>
    1698:	8c 36       	cpi	r24, 0x6C	; 108
    169a:	11 f4       	brne	.+4      	; 0x16a0 <vfprintf+0xec>
    169c:	20 68       	ori	r18, 0x80	; 128
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <vfprintf+0xf0>
    16a0:	88 36       	cpi	r24, 0x68	; 104
    16a2:	41 f4       	brne	.+16     	; 0x16b4 <vfprintf+0x100>
    16a4:	f6 01       	movw	r30, r12
    16a6:	93 fd       	sbrc	r25, 3
    16a8:	85 91       	lpm	r24, Z+
    16aa:	93 ff       	sbrs	r25, 3
    16ac:	81 91       	ld	r24, Z+
    16ae:	6f 01       	movw	r12, r30
    16b0:	81 11       	cpse	r24, r1
    16b2:	c1 cf       	rjmp	.-126    	; 0x1636 <vfprintf+0x82>
    16b4:	98 2f       	mov	r25, r24
    16b6:	9f 7d       	andi	r25, 0xDF	; 223
    16b8:	95 54       	subi	r25, 0x45	; 69
    16ba:	93 30       	cpi	r25, 0x03	; 3
    16bc:	28 f4       	brcc	.+10     	; 0x16c8 <vfprintf+0x114>
    16be:	0c 5f       	subi	r16, 0xFC	; 252
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	ff e3       	ldi	r31, 0x3F	; 63
    16c4:	f9 83       	std	Y+1, r31	; 0x01
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <vfprintf+0x12e>
    16c8:	83 36       	cpi	r24, 0x63	; 99
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <vfprintf+0x124>
    16cc:	83 37       	cpi	r24, 0x73	; 115
    16ce:	71 f0       	breq	.+28     	; 0x16ec <vfprintf+0x138>
    16d0:	83 35       	cpi	r24, 0x53	; 83
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <vfprintf+0x122>
    16d4:	57 c0       	rjmp	.+174    	; 0x1784 <vfprintf+0x1d0>
    16d6:	21 c0       	rjmp	.+66     	; 0x171a <vfprintf+0x166>
    16d8:	f8 01       	movw	r30, r16
    16da:	80 81       	ld	r24, Z
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	0e 5f       	subi	r16, 0xFE	; 254
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	44 24       	eor	r4, r4
    16e4:	43 94       	inc	r4
    16e6:	51 2c       	mov	r5, r1
    16e8:	54 01       	movw	r10, r8
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <vfprintf+0x160>
    16ec:	38 01       	movw	r6, r16
    16ee:	f2 e0       	ldi	r31, 0x02	; 2
    16f0:	6f 0e       	add	r6, r31
    16f2:	71 1c       	adc	r7, r1
    16f4:	f8 01       	movw	r30, r16
    16f6:	a0 80       	ld	r10, Z
    16f8:	b1 80       	ldd	r11, Z+1	; 0x01
    16fa:	26 ff       	sbrs	r18, 6
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <vfprintf+0x150>
    16fe:	65 2d       	mov	r22, r5
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x154>
    1704:	6f ef       	ldi	r22, 0xFF	; 255
    1706:	7f ef       	ldi	r23, 0xFF	; 255
    1708:	c5 01       	movw	r24, r10
    170a:	2c 87       	std	Y+12, r18	; 0x0c
    170c:	72 d1       	rcall	.+740    	; 0x19f2 <strnlen>
    170e:	2c 01       	movw	r4, r24
    1710:	83 01       	movw	r16, r6
    1712:	2c 85       	ldd	r18, Y+12	; 0x0c
    1714:	2f 77       	andi	r18, 0x7F	; 127
    1716:	22 2e       	mov	r2, r18
    1718:	16 c0       	rjmp	.+44     	; 0x1746 <vfprintf+0x192>
    171a:	38 01       	movw	r6, r16
    171c:	f2 e0       	ldi	r31, 0x02	; 2
    171e:	6f 0e       	add	r6, r31
    1720:	71 1c       	adc	r7, r1
    1722:	f8 01       	movw	r30, r16
    1724:	a0 80       	ld	r10, Z
    1726:	b1 80       	ldd	r11, Z+1	; 0x01
    1728:	26 ff       	sbrs	r18, 6
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <vfprintf+0x17e>
    172c:	65 2d       	mov	r22, r5
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x182>
    1732:	6f ef       	ldi	r22, 0xFF	; 255
    1734:	7f ef       	ldi	r23, 0xFF	; 255
    1736:	c5 01       	movw	r24, r10
    1738:	2c 87       	std	Y+12, r18	; 0x0c
    173a:	50 d1       	rcall	.+672    	; 0x19dc <strnlen_P>
    173c:	2c 01       	movw	r4, r24
    173e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1740:	20 68       	ori	r18, 0x80	; 128
    1742:	22 2e       	mov	r2, r18
    1744:	83 01       	movw	r16, r6
    1746:	23 fc       	sbrc	r2, 3
    1748:	19 c0       	rjmp	.+50     	; 0x177c <vfprintf+0x1c8>
    174a:	83 2d       	mov	r24, r3
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	48 16       	cp	r4, r24
    1750:	59 06       	cpc	r5, r25
    1752:	a0 f4       	brcc	.+40     	; 0x177c <vfprintf+0x1c8>
    1754:	b7 01       	movw	r22, r14
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	56 d1       	rcall	.+684    	; 0x1a08 <fputc>
    175c:	3a 94       	dec	r3
    175e:	f5 cf       	rjmp	.-22     	; 0x174a <vfprintf+0x196>
    1760:	f5 01       	movw	r30, r10
    1762:	27 fc       	sbrc	r2, 7
    1764:	85 91       	lpm	r24, Z+
    1766:	27 fe       	sbrs	r2, 7
    1768:	81 91       	ld	r24, Z+
    176a:	5f 01       	movw	r10, r30
    176c:	b7 01       	movw	r22, r14
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	4b d1       	rcall	.+662    	; 0x1a08 <fputc>
    1772:	31 10       	cpse	r3, r1
    1774:	3a 94       	dec	r3
    1776:	f1 e0       	ldi	r31, 0x01	; 1
    1778:	4f 1a       	sub	r4, r31
    177a:	51 08       	sbc	r5, r1
    177c:	41 14       	cp	r4, r1
    177e:	51 04       	cpc	r5, r1
    1780:	79 f7       	brne	.-34     	; 0x1760 <vfprintf+0x1ac>
    1782:	de c0       	rjmp	.+444    	; 0x1940 <vfprintf+0x38c>
    1784:	84 36       	cpi	r24, 0x64	; 100
    1786:	11 f0       	breq	.+4      	; 0x178c <vfprintf+0x1d8>
    1788:	89 36       	cpi	r24, 0x69	; 105
    178a:	31 f5       	brne	.+76     	; 0x17d8 <vfprintf+0x224>
    178c:	f8 01       	movw	r30, r16
    178e:	27 ff       	sbrs	r18, 7
    1790:	07 c0       	rjmp	.+14     	; 0x17a0 <vfprintf+0x1ec>
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	0c 5f       	subi	r16, 0xFC	; 252
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <vfprintf+0x1fc>
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	88 27       	eor	r24, r24
    17a6:	77 fd       	sbrc	r23, 7
    17a8:	80 95       	com	r24
    17aa:	98 2f       	mov	r25, r24
    17ac:	0e 5f       	subi	r16, 0xFE	; 254
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	2f 76       	andi	r18, 0x6F	; 111
    17b2:	b2 2e       	mov	r11, r18
    17b4:	97 ff       	sbrs	r25, 7
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <vfprintf+0x216>
    17b8:	90 95       	com	r25
    17ba:	80 95       	com	r24
    17bc:	70 95       	com	r23
    17be:	61 95       	neg	r22
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	8f 4f       	sbci	r24, 0xFF	; 255
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	20 68       	ori	r18, 0x80	; 128
    17c8:	b2 2e       	mov	r11, r18
    17ca:	2a e0       	ldi	r18, 0x0A	; 10
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	a4 01       	movw	r20, r8
    17d0:	4d d1       	rcall	.+666    	; 0x1a6c <__ultoa_invert>
    17d2:	a8 2e       	mov	r10, r24
    17d4:	a8 18       	sub	r10, r8
    17d6:	43 c0       	rjmp	.+134    	; 0x185e <vfprintf+0x2aa>
    17d8:	85 37       	cpi	r24, 0x75	; 117
    17da:	29 f4       	brne	.+10     	; 0x17e6 <vfprintf+0x232>
    17dc:	2f 7e       	andi	r18, 0xEF	; 239
    17de:	b2 2e       	mov	r11, r18
    17e0:	2a e0       	ldi	r18, 0x0A	; 10
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	25 c0       	rjmp	.+74     	; 0x1830 <vfprintf+0x27c>
    17e6:	f2 2f       	mov	r31, r18
    17e8:	f9 7f       	andi	r31, 0xF9	; 249
    17ea:	bf 2e       	mov	r11, r31
    17ec:	8f 36       	cpi	r24, 0x6F	; 111
    17ee:	c1 f0       	breq	.+48     	; 0x1820 <vfprintf+0x26c>
    17f0:	18 f4       	brcc	.+6      	; 0x17f8 <vfprintf+0x244>
    17f2:	88 35       	cpi	r24, 0x58	; 88
    17f4:	79 f0       	breq	.+30     	; 0x1814 <vfprintf+0x260>
    17f6:	ad c0       	rjmp	.+346    	; 0x1952 <vfprintf+0x39e>
    17f8:	80 37       	cpi	r24, 0x70	; 112
    17fa:	19 f0       	breq	.+6      	; 0x1802 <vfprintf+0x24e>
    17fc:	88 37       	cpi	r24, 0x78	; 120
    17fe:	21 f0       	breq	.+8      	; 0x1808 <vfprintf+0x254>
    1800:	a8 c0       	rjmp	.+336    	; 0x1952 <vfprintf+0x39e>
    1802:	2f 2f       	mov	r18, r31
    1804:	20 61       	ori	r18, 0x10	; 16
    1806:	b2 2e       	mov	r11, r18
    1808:	b4 fe       	sbrs	r11, 4
    180a:	0d c0       	rjmp	.+26     	; 0x1826 <vfprintf+0x272>
    180c:	8b 2d       	mov	r24, r11
    180e:	84 60       	ori	r24, 0x04	; 4
    1810:	b8 2e       	mov	r11, r24
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <vfprintf+0x272>
    1814:	24 ff       	sbrs	r18, 4
    1816:	0a c0       	rjmp	.+20     	; 0x182c <vfprintf+0x278>
    1818:	9f 2f       	mov	r25, r31
    181a:	96 60       	ori	r25, 0x06	; 6
    181c:	b9 2e       	mov	r11, r25
    181e:	06 c0       	rjmp	.+12     	; 0x182c <vfprintf+0x278>
    1820:	28 e0       	ldi	r18, 0x08	; 8
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <vfprintf+0x27c>
    1826:	20 e1       	ldi	r18, 0x10	; 16
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <vfprintf+0x27c>
    182c:	20 e1       	ldi	r18, 0x10	; 16
    182e:	32 e0       	ldi	r19, 0x02	; 2
    1830:	f8 01       	movw	r30, r16
    1832:	b7 fe       	sbrs	r11, 7
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <vfprintf+0x290>
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	0c 5f       	subi	r16, 0xFC	; 252
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <vfprintf+0x29c>
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 5f       	subi	r16, 0xFE	; 254
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	a4 01       	movw	r20, r8
    1852:	0c d1       	rcall	.+536    	; 0x1a6c <__ultoa_invert>
    1854:	a8 2e       	mov	r10, r24
    1856:	a8 18       	sub	r10, r8
    1858:	fb 2d       	mov	r31, r11
    185a:	ff 77       	andi	r31, 0x7F	; 127
    185c:	bf 2e       	mov	r11, r31
    185e:	b6 fe       	sbrs	r11, 6
    1860:	0b c0       	rjmp	.+22     	; 0x1878 <vfprintf+0x2c4>
    1862:	2b 2d       	mov	r18, r11
    1864:	2e 7f       	andi	r18, 0xFE	; 254
    1866:	a5 14       	cp	r10, r5
    1868:	50 f4       	brcc	.+20     	; 0x187e <vfprintf+0x2ca>
    186a:	b4 fe       	sbrs	r11, 4
    186c:	0a c0       	rjmp	.+20     	; 0x1882 <vfprintf+0x2ce>
    186e:	b2 fc       	sbrc	r11, 2
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <vfprintf+0x2ce>
    1872:	2b 2d       	mov	r18, r11
    1874:	2e 7e       	andi	r18, 0xEE	; 238
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <vfprintf+0x2ce>
    1878:	7a 2c       	mov	r7, r10
    187a:	2b 2d       	mov	r18, r11
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfprintf+0x2d0>
    187e:	7a 2c       	mov	r7, r10
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <vfprintf+0x2d0>
    1882:	75 2c       	mov	r7, r5
    1884:	24 ff       	sbrs	r18, 4
    1886:	0d c0       	rjmp	.+26     	; 0x18a2 <vfprintf+0x2ee>
    1888:	fe 01       	movw	r30, r28
    188a:	ea 0d       	add	r30, r10
    188c:	f1 1d       	adc	r31, r1
    188e:	80 81       	ld	r24, Z
    1890:	80 33       	cpi	r24, 0x30	; 48
    1892:	11 f4       	brne	.+4      	; 0x1898 <vfprintf+0x2e4>
    1894:	29 7e       	andi	r18, 0xE9	; 233
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <vfprintf+0x2f6>
    1898:	22 ff       	sbrs	r18, 2
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x2f4>
    189c:	73 94       	inc	r7
    189e:	73 94       	inc	r7
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <vfprintf+0x2f6>
    18a2:	82 2f       	mov	r24, r18
    18a4:	86 78       	andi	r24, 0x86	; 134
    18a6:	09 f0       	breq	.+2      	; 0x18aa <vfprintf+0x2f6>
    18a8:	73 94       	inc	r7
    18aa:	23 fd       	sbrc	r18, 3
    18ac:	12 c0       	rjmp	.+36     	; 0x18d2 <vfprintf+0x31e>
    18ae:	20 ff       	sbrs	r18, 0
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vfprintf+0x30a>
    18b2:	5a 2c       	mov	r5, r10
    18b4:	73 14       	cp	r7, r3
    18b6:	18 f4       	brcc	.+6      	; 0x18be <vfprintf+0x30a>
    18b8:	53 0c       	add	r5, r3
    18ba:	57 18       	sub	r5, r7
    18bc:	73 2c       	mov	r7, r3
    18be:	73 14       	cp	r7, r3
    18c0:	60 f4       	brcc	.+24     	; 0x18da <vfprintf+0x326>
    18c2:	b7 01       	movw	r22, r14
    18c4:	80 e2       	ldi	r24, 0x20	; 32
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	2c 87       	std	Y+12, r18	; 0x0c
    18ca:	9e d0       	rcall	.+316    	; 0x1a08 <fputc>
    18cc:	73 94       	inc	r7
    18ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    18d0:	f6 cf       	rjmp	.-20     	; 0x18be <vfprintf+0x30a>
    18d2:	73 14       	cp	r7, r3
    18d4:	10 f4       	brcc	.+4      	; 0x18da <vfprintf+0x326>
    18d6:	37 18       	sub	r3, r7
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <vfprintf+0x328>
    18da:	31 2c       	mov	r3, r1
    18dc:	24 ff       	sbrs	r18, 4
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <vfprintf+0x34e>
    18e0:	b7 01       	movw	r22, r14
    18e2:	80 e3       	ldi	r24, 0x30	; 48
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	2c 87       	std	Y+12, r18	; 0x0c
    18e8:	8f d0       	rcall	.+286    	; 0x1a08 <fputc>
    18ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ec:	22 ff       	sbrs	r18, 2
    18ee:	16 c0       	rjmp	.+44     	; 0x191c <vfprintf+0x368>
    18f0:	21 ff       	sbrs	r18, 1
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <vfprintf+0x346>
    18f4:	88 e5       	ldi	r24, 0x58	; 88
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x34a>
    18fa:	88 e7       	ldi	r24, 0x78	; 120
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	b7 01       	movw	r22, r14
    1900:	0c c0       	rjmp	.+24     	; 0x191a <vfprintf+0x366>
    1902:	82 2f       	mov	r24, r18
    1904:	86 78       	andi	r24, 0x86	; 134
    1906:	51 f0       	breq	.+20     	; 0x191c <vfprintf+0x368>
    1908:	21 fd       	sbrc	r18, 1
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x35c>
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <vfprintf+0x35e>
    1910:	8b e2       	ldi	r24, 0x2B	; 43
    1912:	27 fd       	sbrc	r18, 7
    1914:	8d e2       	ldi	r24, 0x2D	; 45
    1916:	b7 01       	movw	r22, r14
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	76 d0       	rcall	.+236    	; 0x1a08 <fputc>
    191c:	a5 14       	cp	r10, r5
    191e:	30 f4       	brcc	.+12     	; 0x192c <vfprintf+0x378>
    1920:	b7 01       	movw	r22, r14
    1922:	80 e3       	ldi	r24, 0x30	; 48
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	70 d0       	rcall	.+224    	; 0x1a08 <fputc>
    1928:	5a 94       	dec	r5
    192a:	f8 cf       	rjmp	.-16     	; 0x191c <vfprintf+0x368>
    192c:	aa 94       	dec	r10
    192e:	f4 01       	movw	r30, r8
    1930:	ea 0d       	add	r30, r10
    1932:	f1 1d       	adc	r31, r1
    1934:	80 81       	ld	r24, Z
    1936:	b7 01       	movw	r22, r14
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	66 d0       	rcall	.+204    	; 0x1a08 <fputc>
    193c:	a1 10       	cpse	r10, r1
    193e:	f6 cf       	rjmp	.-20     	; 0x192c <vfprintf+0x378>
    1940:	33 20       	and	r3, r3
    1942:	09 f4       	brne	.+2      	; 0x1946 <vfprintf+0x392>
    1944:	5d ce       	rjmp	.-838    	; 0x1600 <vfprintf+0x4c>
    1946:	b7 01       	movw	r22, r14
    1948:	80 e2       	ldi	r24, 0x20	; 32
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	5d d0       	rcall	.+186    	; 0x1a08 <fputc>
    194e:	3a 94       	dec	r3
    1950:	f7 cf       	rjmp	.-18     	; 0x1940 <vfprintf+0x38c>
    1952:	f7 01       	movw	r30, r14
    1954:	86 81       	ldd	r24, Z+6	; 0x06
    1956:	97 81       	ldd	r25, Z+7	; 0x07
    1958:	02 c0       	rjmp	.+4      	; 0x195e <vfprintf+0x3aa>
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	2c 96       	adiw	r28, 0x0c	; 12
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	9f 90       	pop	r9
    1980:	8f 90       	pop	r8
    1982:	7f 90       	pop	r7
    1984:	6f 90       	pop	r6
    1986:	5f 90       	pop	r5
    1988:	4f 90       	pop	r4
    198a:	3f 90       	pop	r3
    198c:	2f 90       	pop	r2
    198e:	08 95       	ret

00001990 <__eerd_block_m128>:
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22

00001994 <__eerd_blraw_m128>:
    1994:	fc 01       	movw	r30, r24
    1996:	e1 99       	sbic	0x1c, 1	; 28
    1998:	fe cf       	rjmp	.-4      	; 0x1996 <__eerd_blraw_m128+0x2>
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <__eerd_blraw_m128+0x14>
    199c:	ff bb       	out	0x1f, r31	; 31
    199e:	ee bb       	out	0x1e, r30	; 30
    19a0:	e0 9a       	sbi	0x1c, 0	; 28
    19a2:	31 96       	adiw	r30, 0x01	; 1
    19a4:	0d b2       	in	r0, 0x1d	; 29
    19a6:	0d 92       	st	X+, r0
    19a8:	41 50       	subi	r20, 0x01	; 1
    19aa:	50 40       	sbci	r21, 0x00	; 0
    19ac:	b8 f7       	brcc	.-18     	; 0x199c <__eerd_blraw_m128+0x8>
    19ae:	08 95       	ret

000019b0 <__eewr_block_m128>:
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <__eewr_block_m128+0xa>
    19b6:	2d 91       	ld	r18, X+
    19b8:	05 d0       	rcall	.+10     	; 0x19c4 <__eewr_r18_m128>
    19ba:	41 50       	subi	r20, 0x01	; 1
    19bc:	50 40       	sbci	r21, 0x00	; 0
    19be:	d8 f7       	brcc	.-10     	; 0x19b6 <__eewr_block_m128+0x6>
    19c0:	08 95       	ret

000019c2 <__eewr_byte_m128>:
    19c2:	26 2f       	mov	r18, r22

000019c4 <__eewr_r18_m128>:
    19c4:	e1 99       	sbic	0x1c, 1	; 28
    19c6:	fe cf       	rjmp	.-4      	; 0x19c4 <__eewr_r18_m128>
    19c8:	9f bb       	out	0x1f, r25	; 31
    19ca:	8e bb       	out	0x1e, r24	; 30
    19cc:	2d bb       	out	0x1d, r18	; 29
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	e2 9a       	sbi	0x1c, 2	; 28
    19d4:	e1 9a       	sbi	0x1c, 1	; 28
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	08 95       	ret

000019dc <strnlen_P>:
    19dc:	fc 01       	movw	r30, r24
    19de:	05 90       	lpm	r0, Z+
    19e0:	61 50       	subi	r22, 0x01	; 1
    19e2:	70 40       	sbci	r23, 0x00	; 0
    19e4:	01 10       	cpse	r0, r1
    19e6:	d8 f7       	brcc	.-10     	; 0x19de <strnlen_P+0x2>
    19e8:	80 95       	com	r24
    19ea:	90 95       	com	r25
    19ec:	8e 0f       	add	r24, r30
    19ee:	9f 1f       	adc	r25, r31
    19f0:	08 95       	ret

000019f2 <strnlen>:
    19f2:	fc 01       	movw	r30, r24
    19f4:	61 50       	subi	r22, 0x01	; 1
    19f6:	70 40       	sbci	r23, 0x00	; 0
    19f8:	01 90       	ld	r0, Z+
    19fa:	01 10       	cpse	r0, r1
    19fc:	d8 f7       	brcc	.-10     	; 0x19f4 <strnlen+0x2>
    19fe:	80 95       	com	r24
    1a00:	90 95       	com	r25
    1a02:	8e 0f       	add	r24, r30
    1a04:	9f 1f       	adc	r25, r31
    1a06:	08 95       	ret

00001a08 <fputc>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	18 2f       	mov	r17, r24
    1a12:	09 2f       	mov	r16, r25
    1a14:	eb 01       	movw	r28, r22
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	81 fd       	sbrc	r24, 1
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <fputc+0x1a>
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	9f ef       	ldi	r25, 0xFF	; 255
    1a20:	20 c0       	rjmp	.+64     	; 0x1a62 <fputc+0x5a>
    1a22:	82 ff       	sbrs	r24, 2
    1a24:	10 c0       	rjmp	.+32     	; 0x1a46 <fputc+0x3e>
    1a26:	4e 81       	ldd	r20, Y+6	; 0x06
    1a28:	5f 81       	ldd	r21, Y+7	; 0x07
    1a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2e:	42 17       	cp	r20, r18
    1a30:	53 07       	cpc	r21, r19
    1a32:	7c f4       	brge	.+30     	; 0x1a52 <fputc+0x4a>
    1a34:	e8 81       	ld	r30, Y
    1a36:	f9 81       	ldd	r31, Y+1	; 0x01
    1a38:	9f 01       	movw	r18, r30
    1a3a:	2f 5f       	subi	r18, 0xFF	; 255
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	39 83       	std	Y+1, r19	; 0x01
    1a40:	28 83       	st	Y, r18
    1a42:	10 83       	st	Z, r17
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <fputc+0x4a>
    1a46:	e8 85       	ldd	r30, Y+8	; 0x08
    1a48:	f9 85       	ldd	r31, Y+9	; 0x09
    1a4a:	81 2f       	mov	r24, r17
    1a4c:	09 95       	icall
    1a4e:	89 2b       	or	r24, r25
    1a50:	29 f7       	brne	.-54     	; 0x1a1c <fputc+0x14>
    1a52:	2e 81       	ldd	r18, Y+6	; 0x06
    1a54:	3f 81       	ldd	r19, Y+7	; 0x07
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	3f 83       	std	Y+7, r19	; 0x07
    1a5c:	2e 83       	std	Y+6, r18	; 0x06
    1a5e:	81 2f       	mov	r24, r17
    1a60:	90 2f       	mov	r25, r16
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <__ultoa_invert>:
    1a6c:	fa 01       	movw	r30, r20
    1a6e:	aa 27       	eor	r26, r26
    1a70:	28 30       	cpi	r18, 0x08	; 8
    1a72:	51 f1       	breq	.+84     	; 0x1ac8 <__ultoa_invert+0x5c>
    1a74:	20 31       	cpi	r18, 0x10	; 16
    1a76:	81 f1       	breq	.+96     	; 0x1ad8 <__ultoa_invert+0x6c>
    1a78:	e8 94       	clt
    1a7a:	6f 93       	push	r22
    1a7c:	6e 7f       	andi	r22, 0xFE	; 254
    1a7e:	6e 5f       	subi	r22, 0xFE	; 254
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	8f 4f       	sbci	r24, 0xFF	; 255
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	af 4f       	sbci	r26, 0xFF	; 255
    1a88:	b1 e0       	ldi	r27, 0x01	; 1
    1a8a:	3e d0       	rcall	.+124    	; 0x1b08 <__ultoa_invert+0x9c>
    1a8c:	b4 e0       	ldi	r27, 0x04	; 4
    1a8e:	3c d0       	rcall	.+120    	; 0x1b08 <__ultoa_invert+0x9c>
    1a90:	67 0f       	add	r22, r23
    1a92:	78 1f       	adc	r23, r24
    1a94:	89 1f       	adc	r24, r25
    1a96:	9a 1f       	adc	r25, r26
    1a98:	a1 1d       	adc	r26, r1
    1a9a:	68 0f       	add	r22, r24
    1a9c:	79 1f       	adc	r23, r25
    1a9e:	8a 1f       	adc	r24, r26
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	a1 1d       	adc	r26, r1
    1aa4:	6a 0f       	add	r22, r26
    1aa6:	71 1d       	adc	r23, r1
    1aa8:	81 1d       	adc	r24, r1
    1aaa:	91 1d       	adc	r25, r1
    1aac:	a1 1d       	adc	r26, r1
    1aae:	20 d0       	rcall	.+64     	; 0x1af0 <__ultoa_invert+0x84>
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <__ultoa_invert+0x48>
    1ab2:	68 94       	set
    1ab4:	3f 91       	pop	r19
    1ab6:	2a e0       	ldi	r18, 0x0A	; 10
    1ab8:	26 9f       	mul	r18, r22
    1aba:	11 24       	eor	r1, r1
    1abc:	30 19       	sub	r19, r0
    1abe:	30 5d       	subi	r19, 0xD0	; 208
    1ac0:	31 93       	st	Z+, r19
    1ac2:	de f6       	brtc	.-74     	; 0x1a7a <__ultoa_invert+0xe>
    1ac4:	cf 01       	movw	r24, r30
    1ac6:	08 95       	ret
    1ac8:	46 2f       	mov	r20, r22
    1aca:	47 70       	andi	r20, 0x07	; 7
    1acc:	40 5d       	subi	r20, 0xD0	; 208
    1ace:	41 93       	st	Z+, r20
    1ad0:	b3 e0       	ldi	r27, 0x03	; 3
    1ad2:	0f d0       	rcall	.+30     	; 0x1af2 <__ultoa_invert+0x86>
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__ultoa_invert+0x5c>
    1ad6:	f6 cf       	rjmp	.-20     	; 0x1ac4 <__ultoa_invert+0x58>
    1ad8:	46 2f       	mov	r20, r22
    1ada:	4f 70       	andi	r20, 0x0F	; 15
    1adc:	40 5d       	subi	r20, 0xD0	; 208
    1ade:	4a 33       	cpi	r20, 0x3A	; 58
    1ae0:	18 f0       	brcs	.+6      	; 0x1ae8 <__ultoa_invert+0x7c>
    1ae2:	49 5d       	subi	r20, 0xD9	; 217
    1ae4:	31 fd       	sbrc	r19, 1
    1ae6:	40 52       	subi	r20, 0x20	; 32
    1ae8:	41 93       	st	Z+, r20
    1aea:	02 d0       	rcall	.+4      	; 0x1af0 <__ultoa_invert+0x84>
    1aec:	a9 f7       	brne	.-22     	; 0x1ad8 <__ultoa_invert+0x6c>
    1aee:	ea cf       	rjmp	.-44     	; 0x1ac4 <__ultoa_invert+0x58>
    1af0:	b4 e0       	ldi	r27, 0x04	; 4
    1af2:	a6 95       	lsr	r26
    1af4:	97 95       	ror	r25
    1af6:	87 95       	ror	r24
    1af8:	77 95       	ror	r23
    1afa:	67 95       	ror	r22
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__ultoa_invert+0x86>
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 05       	cpc	r22, r1
    1b04:	71 05       	cpc	r23, r1
    1b06:	08 95       	ret
    1b08:	9b 01       	movw	r18, r22
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	0a 2e       	mov	r0, r26
    1b0e:	06 94       	lsr	r0
    1b10:	57 95       	ror	r21
    1b12:	47 95       	ror	r20
    1b14:	37 95       	ror	r19
    1b16:	27 95       	ror	r18
    1b18:	ba 95       	dec	r27
    1b1a:	c9 f7       	brne	.-14     	; 0x1b0e <__ultoa_invert+0xa2>
    1b1c:	62 0f       	add	r22, r18
    1b1e:	73 1f       	adc	r23, r19
    1b20:	84 1f       	adc	r24, r20
    1b22:	95 1f       	adc	r25, r21
    1b24:	a0 1d       	adc	r26, r0
    1b26:	08 95       	ret

00001b28 <_exit>:
    1b28:	f8 94       	cli

00001b2a <__stop_program>:
    1b2a:	ff cf       	rjmp	.-2      	; 0x1b2a <__stop_program>
