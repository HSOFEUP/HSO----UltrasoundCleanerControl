#include <avr/io.h>
#include <stdint.h>
#include <avr/io.h>
#include <util/delay.h>




// CHECK SIGNAL OF variables
#define SIGN(X) ((X > 0) ? 1: ((X < 0)? -1:0))

/************************************************************************/
/* Macros to form port and pint from parameter                                                                     */
/************************************************************************/
#define GLUE(a, b)	a##b
#define PORT(x)		GLUE(PORT, x)
#define DDR(x)		GLUE(DDR, x)
#define PIN(x)		GLUE(PIN, x)

#define setBits(port,mask)	do{ (port) |=  (mask); }while(0)
#define clrBits(port,mask)	do{ (port) &= ~(mask); }while(0)
#define tstBits(port,mask)	((port) & (mask))

/************************************************************************/
/* Macros for delays                                                                     */
/************************************************************************/
#define NOP() __asm__ __volatile__("nop")


/************************************************************************/
/* check index of string    -1 false                                                                  */
/************************************************************************/
int8_t indexOf(char *data, char c);

/************************************************************************/
/* parse seting                                                                     */
/************************************************************************/
uint8_t parseString_STRTOK(char *data, char delimiter);

/************************************************************************/
/* parse seting                                                                     */
/************************************************************************/
uint8_t parseString(char *data, char delimiterChar);

/************************************************************************/
/* @UsartSendDecimal                                                    */
/************************************************************************/
void sendDecUSART(uint8_t value);
/************************************************************************/
/* @UsartSendHex                                                    */
/************************************************************************/
void sendHexUSART(uint8_t value);

/************************************************************************/
/* @CalcHexNibble                                                       */
/************************************************************************/
void calc_hex_nibble(uint8_t nibble);
/************************************************************************/
/* @Usart Send Binary                                                   */
/************************************************************************/
void sendBinUSART(uint8_t value);